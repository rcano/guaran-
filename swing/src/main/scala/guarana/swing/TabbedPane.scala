//AUTOGENERATED FILE, DO NOT MODIFY

package guarana
package swing

import language.implicitConversions
import java.awt.{Component as _, Menu as _, MenuBar as _, MenuItem as _, TextComponent as _, TextField as _, PopupMenu as _, *}
import javax.swing.Action as _
import javax.swing.event.*
import guarana.util.*

opaque type TabbedPane <: Component  = javax.swing.JTabbedPane & Component
object TabbedPane extends VarsMap {
  val UI: SwingVar.Aux[TabbedPane, javax.swing.plaf.TabbedPaneUI] = SwingVar[TabbedPane, javax.swing.plaf.TabbedPaneUI]("UI", _.getUI.nn, _.setUI(_))
  val Model: SwingVar.Aux[TabbedPane, javax.swing.SingleSelectionModel] = SwingVar[TabbedPane, javax.swing.SingleSelectionModel]("model", _.getModel.nn, _.setModel(_))
  val SelectedComponent: SwingVar.Aux[TabbedPane, Option[Node]] = SwingVar[TabbedPane, Option[Node]]("selectedComponent", _.getSelectedComponent.toOption.asInstanceOf, (p, n) => p.setSelectedComponent(n.fold(null)(_.unwrap)))
  val SelectedIndex: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("selectedIndex", _.getSelectedIndex, _.setSelectedIndex(_))
  val TabLayoutPolicy: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("tabLayoutPolicy", _.getTabLayoutPolicy, _.setTabLayoutPolicy(_))
  val TabPlacement: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("tabPlacement", _.getTabPlacement, _.setTabPlacement(_))
  val Tabs: Var[ObsBuffer[Tab]] = Var[ObsBuffer[Tab]]("tabs", ObsBuffer(), true)

  

  given ops: Ops.type = Ops
  object Ops {
    extension (v: TabbedPane) {
      def UI: Var.Aux[javax.swing.plaf.TabbedPaneUI, v.type] = TabbedPane.UI.asInstanceOf[Var.Aux[javax.swing.plaf.TabbedPaneUI, v.type]]
      def model: Var.Aux[javax.swing.SingleSelectionModel, v.type] = TabbedPane.Model.asInstanceOf[Var.Aux[javax.swing.SingleSelectionModel, v.type]]
      def selectedComponent: Var.Aux[Option[Node], v.type] = TabbedPane.SelectedComponent.asInstanceOf[Var.Aux[Option[Node], v.type]]
      def selectedIndex: Var.Aux[Int, v.type] = TabbedPane.SelectedIndex.asInstanceOf[Var.Aux[Int, v.type]]
      def tabLayoutPolicy: Var.Aux[Int, v.type] = TabbedPane.TabLayoutPolicy.asInstanceOf[Var.Aux[Int, v.type]]
      def tabPlacement: Var.Aux[Int, v.type] = TabbedPane.TabPlacement.asInstanceOf[Var.Aux[Int, v.type]]
      def tabs: Var.Aux[ObsBuffer[Tab], v.type] = TabbedPane.Tabs.asInstanceOf[Var.Aux[ObsBuffer[Tab], v.type]]

      

      def changeListeners: Array[javax.swing.event.ChangeListener] = v.getChangeListeners.asInstanceOf
      def tabCount: Int = v.getTabCount
      def tabRunCount: Int = v.getTabRunCount
      def unwrap: javax.swing.JTabbedPane = v
    }
  }

  def wrap(v: javax.swing.JTabbedPane) = v.asInstanceOf[TabbedPane]

  def init(v: TabbedPane): Scenegraph ?=> Unit = (sc: Scenegraph) ?=> {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    object LocatedTab {
      def unapply(t: Any)(using VarContext): Option[(Tab, Int)] = t match {
        case t: Tab =>  v.tabs().indexOf(t) match {
          case -1 => None
          case i => Some(t -> i)
        }
        case _ => None
      }
    }
    val tabReactions = EventIterator.foreach {
      //react to updates to the vars of the Tabs
      case Tab.Title.generic(LocatedTab(t, at), oldv, newv) => v.setTitleAt(at, newv)
      case Tab.Icon.generic(LocatedTab(t, at), oldv, newv) => v.setIconAt(at, newv)
      case Tab.Content.generic(LocatedTab(t, at), oldv, newv) => v.setComponentAt(at, newv.unwrap)
      case Tab.Tip.generic(LocatedTab(t, at), oldv, newv) => v.setToolTipTextAt(at, newv)
      case Tab.Enabled.generic(LocatedTab(t, at), oldv, newv) => v.setEnabledAt(at, newv)
      case Tab.TabNode.generic(LocatedTab(t, at), oldv, newv) => v.setTabComponentAt(at, newv.?(_.unwrap))
      case _ => 
    }
    //helper methods to add tabs and react to their changes
    def addTab(t: Tab): Unit = sc.update {
      v.addTab(t.title(), t.icon(), t.content().unwrap, t.tip())
      v.setEnabledAt(v.getTabCount - 1, t.enabled())
      v.setTabComponentAt(v.getTabCount - 1, t.tabNode().?(_.unwrap))
      t.varUpdates := tabReactions
    }
    def removeTab(at: Int): Unit = v.removeTabAt(at)
    def insertTab(t: Tab, at: Int) = sc.update { 
      v.insertTab(t.title(), t.icon(), t.content().unwrap, t.tip(), at)
      v.setEnabledAt(at, t.enabled())
      v.setTabComponentAt(at, t.tabNode().?(_.unwrap))
      t.varUpdates := tabReactions
    }
    def replaceTab(oldTab: Tab, withTab: Tab) = sc.update {
      val at = v.indexOfTabComponent(oldTab.content().?(_.unwrap))
      v.setTitleAt(at, withTab.title())
      v.setIconAt(at, withTab.icon())
      v.setComponentAt(at, withTab.content().unwrap)
      v.setToolTipTextAt(at, withTab.tip())
      v.setEnabledAt(at, withTab.enabled())
      v.setTabComponentAt(at, withTab.tabNode().?(_.unwrap))
      withTab.varUpdates := tabReactions
    }
    
    val bufferListener: PartialFunction[ObsBuffer.Event[Tab], Unit] = {
      case ObsBuffer.Event.Added(elems) => elems foreach addTab
      case ObsBuffer.Event.Inserted(elems, at) => elems.zipWithIndex foreach ((e, i) => insertTab(e, at + i))
      case ObsBuffer.Event.Removed(elems, at) => elems foreach (_ => removeTab(at))
      case ObsBuffer.Event.Replaced(oldElem, newElem, at) => replaceTab(oldElem, newElem)
      case ObsBuffer.Event.Cleared(_) => v.removeAll()
    }
    
    
    sc.update {
      v.varUpdates := EventIterator.foreach {
        case v.tabs(old, newv) =>
          old.foreach(_.observers -= bufferListener)
          newv.observers += bufferListener
    
          //replace all tabs
          v.removeAll()
          newv foreach addTab
        case _ => 
      }
    
      val cl: ChangeListener = evt => sc.update{
        val vc = summon[VarContext]
        vc.externalPropertyUpdated(v.selectedComponent, v.getSelectedComponent.toOption.asInstanceOf)
        vc.externalPropertyUpdated(v.selectedIndex, Some(v.getSelectedIndex))
      }
      v.addChangeListener(cl)
    }
    
  }
  def uninitialized(): TabbedPane = {
    val res = javax.swing.JTabbedPane().asInstanceOf[TabbedPane]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.TabbedPaneUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[PopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    model: Opt[Binding[javax.swing.SingleSelectionModel]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    selectedComponent: Opt[Binding[Option[Node]]] = UnsetParam,
    selectedIndex: Opt[Binding[Int]] = UnsetParam,
    tabLayoutPolicy: Opt[Binding[Int]] = UnsetParam,
    tabPlacement: Opt[Binding[Int]] = UnsetParam,
    tabs: Opt[Binding[ObsBuffer[Tab]]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[TabbedPane] = {
    val res = uninitialized()
    TabbedPane.init(res)
    ifSet(UI, TabbedPane.ops.UI(res) := _)
    ifSet(actionMap, Component.ops.actionMap(res) := _)
    ifSet(alignmentX, Component.ops.alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.autoscrolls(res) := _)
    ifSet(background, Node.ops.background(res) := _)
    ifSet(border, Component.ops.border(res) := _)
    ifSet(bounds, Node.ops.bounds(res) := _)
    ifSet(componentOrientation, Node.ops.componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.debugGraphicsOptions(res) := _)
    ifSet(doubleBuffered, Component.ops.doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.enabled(res) := _)
    ifSet(focusable, Node.ops.focusable(res) := _)
    ifSet(font, Node.ops.font(res) := _)
    ifSet(foreground, Node.ops.foreground(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.inputVerifier(res) := _)
    ifSet(maxSize, Node.ops.maxSize(res) := _)
    ifSet(minSize, Node.ops.minSize(res) := _)
    ifSet(model, TabbedPane.ops.model(res) := _)
    ifSet(name, Node.ops.name(res) := _)
    ifSet(opaque, Component.ops.opaque(res) := _)
    ifSet(prefSize, Node.ops.prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.requestFocusEnabled(res) := _)
    ifSet(selectedComponent, TabbedPane.ops.selectedComponent(res) := _)
    ifSet(selectedIndex, TabbedPane.ops.selectedIndex(res) := _)
    ifSet(tabLayoutPolicy, TabbedPane.ops.tabLayoutPolicy(res) := _)
    ifSet(tabPlacement, TabbedPane.ops.tabPlacement(res) := _)
    ifSet(tabs, TabbedPane.ops.tabs(res) := _)
    ifSet(toolTipText, Component.ops.toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.transferHandler(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.visible(res) := _)
    res
  }
  
}