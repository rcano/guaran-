//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, TextComponent => _, TextField => _, _}
import java.awt.event._
import javax.swing._
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type TabbedPane <: Component = javax.swing.JTabbedPane & Component
object TabbedPane extends VarsMap {
  val UI: SwingVar.Aux[TabbedPane, javax.swing.plaf.TabbedPaneUI] = SwingVar[TabbedPane, javax.swing.plaf.TabbedPaneUI]("UI", _.getUI.nn, _.setUI(_))
  val Model: SwingVar.Aux[TabbedPane, javax.swing.SingleSelectionModel] = SwingVar[TabbedPane, javax.swing.SingleSelectionModel]("model", _.getModel.nn, _.setModel(_))
  val SelectedComponent: SwingVar.Aux[TabbedPane, Option[Node]] = SwingVar[TabbedPane, Option[Node]]("selectedComponent", _.getSelectedComponent.toOption.asInstanceOf, (p, n) => p.setSelectedComponent(n.fold(null)(_.unwrap)))
  val SelectedIndex: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("selectedIndex", _.getSelectedIndex, _.setSelectedIndex(_))
  val TabLayoutPolicy: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("tabLayoutPolicy", _.getTabLayoutPolicy, _.setTabLayoutPolicy(_))
  val TabPlacement: SwingVar.Aux[TabbedPane, Int] = SwingVar[TabbedPane, Int]("tabPlacement", _.getTabPlacement, _.setTabPlacement(_))
  val Tabs: Var[ObsBuffer[Tab]] = Var[ObsBuffer[Tab]]("tabs", ObsBuffer(), true)

  

  extension ops on (v: TabbedPane) {
    def UI: Var.Aux[javax.swing.plaf.TabbedPaneUI, v.type] = TabbedPane.UI.asInstanceOf[Var.Aux[javax.swing.plaf.TabbedPaneUI, v.type]]
    def model: Var.Aux[javax.swing.SingleSelectionModel, v.type] = TabbedPane.Model.asInstanceOf[Var.Aux[javax.swing.SingleSelectionModel, v.type]]
    def selectedComponent: Var.Aux[Option[Node], v.type] = TabbedPane.SelectedComponent.asInstanceOf[Var.Aux[Option[Node], v.type]]
    def selectedIndex: Var.Aux[Int, v.type] = TabbedPane.SelectedIndex.asInstanceOf[Var.Aux[Int, v.type]]
    def tabLayoutPolicy: Var.Aux[Int, v.type] = TabbedPane.TabLayoutPolicy.asInstanceOf[Var.Aux[Int, v.type]]
    def tabPlacement: Var.Aux[Int, v.type] = TabbedPane.TabPlacement.asInstanceOf[Var.Aux[Int, v.type]]
    def tabs: Var.Aux[ObsBuffer[Tab], v.type] = TabbedPane.Tabs.asInstanceOf[Var.Aux[ObsBuffer[Tab], v.type]]

    

    def changeListeners: Array[javax.swing.event.ChangeListener] = v.getChangeListeners.asInstanceOf
    def tabCount: Int = v.getTabCount
    def tabRunCount: Int = v.getTabRunCount
    def unwrap: javax.swing.JTabbedPane = v
  }

  def wrap(v: javax.swing.JTabbedPane) = v.asInstanceOf[TabbedPane]

  def init(v: TabbedPane): Scenegraph ?=> Unit = (using sc: Scenegraph) => {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    //helper methods to add tabs and react to their changes
    def addTab(t: Tab): Unit = sc.update {
      v.addTab(t.title(), t.icon(), t.content().unwrap, t.tip())
      v.setEnabledAt(v.getTabCount - 1, t.enabled())
      v.setTabComponentAt(v.getTabCount - 1, t.tabNode().?(_.unwrap))
    }
    def removeTab(at: Int): Unit = v.removeTabAt(at)
    def insertTab(t: Tab, at: Int) = sc.update { 
      v.insertTab(t.title(), t.icon(), t.content().unwrap, t.tip(), at)
      v.setEnabledAt(at, t.enabled())
      v.setTabComponentAt(at, t.tabNode().?(_.unwrap))
    }
    def replaceTab(oldTab: Tab, withTab: Tab) = sc.update {
      val at = v.indexOfTabComponent(oldTab.content().?(_.unwrap))
      v.setTitleAt(at, withTab.title())
      v.setIconAt(at, withTab.icon())
      v.setComponentAt(at, withTab.content().unwrap)
      v.setToolTipTextAt(at, withTab.tip())
      v.setEnabledAt(at, withTab.enabled())
      v.setTabComponentAt(at, withTab.tabNode().?(_.unwrap))
    }
    
    val bufferListener: PartialFunction[ObsBuffer.Event[Tab], Unit] = {
      case ObsBuffer.Event.Added(elems) => elems foreach addTab
      case ObsBuffer.Event.Inserted(elems, at) => elems.zipWithIndex foreach ((e, i) => insertTab(e, at + i))
      case ObsBuffer.Event.Removed(elems, at) => elems foreach (_ => removeTab(at))
      case ObsBuffer.Event.Replaced(oldElem, newElem) => replaceTab(oldElem, newElem)
      case ObsBuffer.Event.Cleared => v.removeAll()
    }
    
    object LocatedTab {
      def unapply(t: Any)(using VarContext): Option[(Tab, Int)] = t match {
        case t: Tab =>  v.tabs().indexOf(t) match {
          case -1 => None
          case i => Some(t -> i)
        }
        case _ => None
      }
    }
    
    sc.update {
      sc.varUpdates := EventIterator.foreach {
        case v.tabs(old, newv) =>
          old.foreach(_.observers -= bufferListener)
          newv.observers += bufferListener
    
          //replace all tabs
          v.removeAll()
          newv foreach addTab
    
        //react to updates to the vars of the Tabs
        case Tab.Title.generic(LocatedTab(t, at), oldv, newv) => v.setTitleAt(at, newv)
        case Tab.Icon.generic(LocatedTab(t, at), oldv, newv) => v.setIconAt(at, newv)
        case Tab.Content.generic(LocatedTab(t, at), oldv, newv) => v.setComponentAt(at, newv.unwrap)
        case Tab.Tip.generic(LocatedTab(t, at), oldv, newv) => v.setToolTipTextAt(at, newv)
        case Tab.Enabled.generic(LocatedTab(t, at), oldv, newv) => v.setEnabledAt(at, newv)
        case Tab.TabNode.generic(LocatedTab(t, at), oldv, newv) => v.setTabComponentAt(at, newv.?(_.unwrap))
    
        case _ => 
      }
    
      val cl: ChangeListener = evt => sc.update{
        val vc = summon[VarContext]
        vc.swingPropertyUpdated(v.selectedComponent, v.getSelectedComponent.toOption.asInstanceOf)
        vc.swingPropertyUpdated(v.selectedIndex, v.getSelectedIndex)
      }
      v.addChangeListener(cl)
    }
    
  }
  def uninitialized(): TabbedPane = {
    val res = javax.swing.JTabbedPane().asInstanceOf[TabbedPane]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.TabbedPaneUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[javax.swing.JPopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    model: Opt[Binding[javax.swing.SingleSelectionModel]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    selectedComponent: Opt[Binding[Option[Node]]] = UnsetParam,
    selectedIndex: Opt[Binding[Int]] = UnsetParam,
    tabLayoutPolicy: Opt[Binding[Int]] = UnsetParam,
    tabPlacement: Opt[Binding[Int]] = UnsetParam,
    tabs: Opt[Binding[ObsBuffer[Tab]]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[TabbedPane] = {
    val res = uninitialized()
    TabbedPane.init(res)
    ifSet(UI, TabbedPane.ops.extension_UI(res) := _)
    ifSet(actionMap, Component.ops.extension_actionMap(res) := _)
    ifSet(alignmentX, Component.ops.extension_alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.extension_alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.extension_autoscrolls(res) := _)
    ifSet(background, Node.ops.extension_background(res) := _)
    ifSet(border, Component.ops.extension_border(res) := _)
    ifSet(bounds, Node.ops.extension_bounds(res) := _)
    ifSet(componentOrientation, Node.ops.extension_componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.extension_componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.extension_cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.extension_debugGraphicsOptions(res) := _)
    ifSet(doubleBuffered, Component.ops.extension_doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.extension_enabled(res) := _)
    ifSet(focusable, Node.ops.extension_focusable(res) := _)
    ifSet(font, Node.ops.extension_font(res) := _)
    ifSet(foreground, Node.ops.extension_foreground(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.extension_inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.extension_inputVerifier(res) := _)
    ifSet(maxSize, Node.ops.extension_maxSize(res) := _)
    ifSet(minSize, Node.ops.extension_minSize(res) := _)
    ifSet(model, TabbedPane.ops.extension_model(res) := _)
    ifSet(mouseDragMut, Node.ops.extension_mouseDragMut(res) := _)
    ifSet(opaque, Component.ops.extension_opaque(res) := _)
    ifSet(prefSize, Node.ops.extension_prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.extension_requestFocusEnabled(res) := _)
    ifSet(selectedComponent, TabbedPane.ops.extension_selectedComponent(res) := _)
    ifSet(selectedIndex, TabbedPane.ops.extension_selectedIndex(res) := _)
    ifSet(tabLayoutPolicy, TabbedPane.ops.extension_tabLayoutPolicy(res) := _)
    ifSet(tabPlacement, TabbedPane.ops.extension_tabPlacement(res) := _)
    ifSet(tabs, TabbedPane.ops.extension_tabs(res) := _)
    ifSet(toolTipText, Component.ops.extension_toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.extension_transferHandler(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.extension_verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.extension_visible(res) := _)
    res
  }
  
}