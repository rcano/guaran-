//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, TextComponent => _, TextField => _, _}
import java.awt.event._
import javax.swing._
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type Label <: Component = javax.swing.JLabel & Component
object Label extends VarsMap {
  val UI: SwingVar.Aux[Label, javax.swing.plaf.LabelUI] = SwingVar[Label, javax.swing.plaf.LabelUI]("UI", _.getUI.nn, _.setUI(_))
  val DisabledIcon: SwingVar.Aux[Label, javax.swing.Icon | Null] = SwingVar[Label, javax.swing.Icon | Null]("disabledIcon", _.getDisabledIcon, _.setDisabledIcon(_))
  val DisplayedMnemonic: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("displayedMnemonic", _.getDisplayedMnemonic, _.setDisplayedMnemonic(_))
  val DisplayedMnemonicIndex: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("displayedMnemonicIndex", _.getDisplayedMnemonicIndex, _.setDisplayedMnemonicIndex(_))
  val HorizontalAlignment: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("horizontalAlignment", _.getHorizontalAlignment, _.setHorizontalAlignment(_))
  val HorizontalTextPosition: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("horizontalTextPosition", _.getHorizontalTextPosition, _.setHorizontalTextPosition(_))
  val Icon: SwingVar.Aux[Label, javax.swing.Icon | Null] = SwingVar[Label, javax.swing.Icon | Null]("icon", _.getIcon, _.setIcon(_))
  val IconTextGap: SwingVar.Aux[Label, Double] = SwingVar[Label, Double]("iconTextGap", _.getIconTextGap, (l, g) => l.setIconTextGap(g.toInt))
  val LabelFor: SwingVar.Aux[Label, java.awt.Component | Null] = SwingVar[Label, java.awt.Component | Null]("labelFor", _.getLabelFor, _.setLabelFor(_))
  val Text: SwingVar.Aux[Label, java.lang.String | Null] = SwingVar[Label, java.lang.String | Null]("text", _.getText, _.setText(_))
  val VerticalAlignment: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("verticalAlignment", _.getVerticalAlignment, _.setVerticalAlignment(_))
  val VerticalTextPosition: SwingVar.Aux[Label, Int] = SwingVar[Label, Int]("verticalTextPosition", _.getVerticalTextPosition, _.setVerticalTextPosition(_))

  

  extension ops on (v: Label) {
    def UI: Var.Aux[javax.swing.plaf.LabelUI, v.type] = Label.UI.asInstanceOf[Var.Aux[javax.swing.plaf.LabelUI, v.type]]
    def disabledIcon: Var.Aux[javax.swing.Icon | Null, v.type] = Label.DisabledIcon.asInstanceOf[Var.Aux[javax.swing.Icon | Null, v.type]]
    def displayedMnemonic: Var.Aux[Int, v.type] = Label.DisplayedMnemonic.asInstanceOf[Var.Aux[Int, v.type]]
    def displayedMnemonicIndex: Var.Aux[Int, v.type] = Label.DisplayedMnemonicIndex.asInstanceOf[Var.Aux[Int, v.type]]
    def horizontalAlignment: Var.Aux[Int, v.type] = Label.HorizontalAlignment.asInstanceOf[Var.Aux[Int, v.type]]
    def horizontalTextPosition: Var.Aux[Int, v.type] = Label.HorizontalTextPosition.asInstanceOf[Var.Aux[Int, v.type]]
    def icon: Var.Aux[javax.swing.Icon | Null, v.type] = Label.Icon.asInstanceOf[Var.Aux[javax.swing.Icon | Null, v.type]]
    def iconTextGap: Var.Aux[Double, v.type] = Label.IconTextGap.asInstanceOf[Var.Aux[Double, v.type]]
    def labelFor: Var.Aux[java.awt.Component | Null, v.type] = Label.LabelFor.asInstanceOf[Var.Aux[java.awt.Component | Null, v.type]]
    def text: Var.Aux[java.lang.String | Null, v.type] = Label.Text.asInstanceOf[Var.Aux[java.lang.String | Null, v.type]]
    def verticalAlignment: Var.Aux[Int, v.type] = Label.VerticalAlignment.asInstanceOf[Var.Aux[Int, v.type]]
    def verticalTextPosition: Var.Aux[Int, v.type] = Label.VerticalTextPosition.asInstanceOf[Var.Aux[Int, v.type]]

    

    
    def unwrap: javax.swing.JLabel = v
  }

  def wrap(v: javax.swing.JLabel) = v.asInstanceOf[Label]

  def init(v: Label): Scenegraph ?=> Unit = (using sc: Scenegraph) => {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    
    
  }
  def uninitialized(): Label = {
    val res = javax.swing.JLabel().asInstanceOf[Label]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.LabelUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[javax.swing.JPopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    disabledIcon: Opt[Binding[javax.swing.Icon | Null]] = UnsetParam,
    displayedMnemonic: Opt[Binding[Int]] = UnsetParam,
    displayedMnemonicIndex: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    horizontalAlignment: Opt[Binding[Int]] = UnsetParam,
    horizontalTextPosition: Opt[Binding[Int]] = UnsetParam,
    icon: Opt[Binding[javax.swing.Icon | Null]] = UnsetParam,
    iconTextGap: Opt[Binding[Double]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    labelFor: Opt[Binding[java.awt.Component | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    text: Opt[Binding[java.lang.String | Null]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    verticalAlignment: Opt[Binding[Int]] = UnsetParam,
    verticalTextPosition: Opt[Binding[Int]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[Label] = {
    val res = uninitialized()
    Label.init(res)
    ifSet(UI, Label.ops.extension_UI(res) := _)
    ifSet(actionMap, Component.ops.extension_actionMap(res) := _)
    ifSet(alignmentX, Component.ops.extension_alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.extension_alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.extension_autoscrolls(res) := _)
    ifSet(background, Node.ops.extension_background(res) := _)
    ifSet(border, Component.ops.extension_border(res) := _)
    ifSet(bounds, Node.ops.extension_bounds(res) := _)
    ifSet(componentOrientation, Node.ops.extension_componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.extension_componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.extension_cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.extension_debugGraphicsOptions(res) := _)
    ifSet(disabledIcon, Label.ops.extension_disabledIcon(res) := _)
    ifSet(displayedMnemonic, Label.ops.extension_displayedMnemonic(res) := _)
    ifSet(displayedMnemonicIndex, Label.ops.extension_displayedMnemonicIndex(res) := _)
    ifSet(doubleBuffered, Component.ops.extension_doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.extension_enabled(res) := _)
    ifSet(focusable, Node.ops.extension_focusable(res) := _)
    ifSet(font, Node.ops.extension_font(res) := _)
    ifSet(foreground, Node.ops.extension_foreground(res) := _)
    ifSet(horizontalAlignment, Label.ops.extension_horizontalAlignment(res) := _)
    ifSet(horizontalTextPosition, Label.ops.extension_horizontalTextPosition(res) := _)
    ifSet(icon, Label.ops.extension_icon(res) := _)
    ifSet(iconTextGap, Label.ops.extension_iconTextGap(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.extension_inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.extension_inputVerifier(res) := _)
    ifSet(labelFor, Label.ops.extension_labelFor(res) := _)
    ifSet(maxSize, Node.ops.extension_maxSize(res) := _)
    ifSet(minSize, Node.ops.extension_minSize(res) := _)
    ifSet(mouseDragMut, Node.ops.extension_mouseDragMut(res) := _)
    ifSet(name, Node.ops.extension_name(res) := _)
    ifSet(opaque, Component.ops.extension_opaque(res) := _)
    ifSet(prefSize, Node.ops.extension_prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.extension_requestFocusEnabled(res) := _)
    ifSet(text, Label.ops.extension_text(res) := _)
    ifSet(toolTipText, Component.ops.extension_toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.extension_transferHandler(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.extension_verifyInputWhenFocusTarget(res) := _)
    ifSet(verticalAlignment, Label.ops.extension_verticalAlignment(res) := _)
    ifSet(verticalTextPosition, Label.ops.extension_verticalTextPosition(res) := _)
    ifSet(visible, Node.ops.extension_visible(res) := _)
    res
  }
  
}