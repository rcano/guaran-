//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, TextComponent => _, TextField => _, _}
import java.awt.event._
import javax.swing._
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type ScrollBar <: Component = javax.swing.JScrollBar & Component
object ScrollBar extends VarsMap {
  val UI: SwingVar.Aux[ScrollBar, javax.swing.plaf.ScrollBarUI] = SwingVar[ScrollBar, javax.swing.plaf.ScrollBarUI]("UI", _.getUI.nn, _.setUI(_))
  val BlockIncrement: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("blockIncrement", _.getBlockIncrement, _.setBlockIncrement(_))
  val Maximum: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("maximum", _.getMaximum, _.setMaximum(_))
  val Minimum: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("minimum", _.getMinimum, _.setMinimum(_))
  val Model: SwingVar.Aux[ScrollBar, javax.swing.BoundedRangeModel] = SwingVar[ScrollBar, javax.swing.BoundedRangeModel]("model", _.getModel.nn, _.setModel(_))
  val Orientation: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("orientation", _.getOrientation, _.setOrientation(_))
  val UnitIncrement: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("unitIncrement", _.getUnitIncrement, _.setUnitIncrement(_))
  val Value: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("value", _.getValue, _.setValue(_))
  val ValueIsAdjusting: SwingVar.Aux[ScrollBar, Boolean] = SwingVar[ScrollBar, Boolean]("valueIsAdjusting", _.getValueIsAdjusting, _.setValueIsAdjusting(_))
  val VisibleAmount: SwingVar.Aux[ScrollBar, Int] = SwingVar[ScrollBar, Int]("visibleAmount", _.getVisibleAmount, _.setVisibleAmount(_))

  

  extension ops on (v: ScrollBar) {
    def UI: Var.Aux[javax.swing.plaf.ScrollBarUI, v.type] = ScrollBar.UI.asInstanceOf[Var.Aux[javax.swing.plaf.ScrollBarUI, v.type]]
    def blockIncrement: Var.Aux[Int, v.type] = ScrollBar.BlockIncrement.asInstanceOf[Var.Aux[Int, v.type]]
    def maximum: Var.Aux[Int, v.type] = ScrollBar.Maximum.asInstanceOf[Var.Aux[Int, v.type]]
    def minimum: Var.Aux[Int, v.type] = ScrollBar.Minimum.asInstanceOf[Var.Aux[Int, v.type]]
    def model: Var.Aux[javax.swing.BoundedRangeModel, v.type] = ScrollBar.Model.asInstanceOf[Var.Aux[javax.swing.BoundedRangeModel, v.type]]
    def orientation: Var.Aux[Int, v.type] = ScrollBar.Orientation.asInstanceOf[Var.Aux[Int, v.type]]
    def unitIncrement: Var.Aux[Int, v.type] = ScrollBar.UnitIncrement.asInstanceOf[Var.Aux[Int, v.type]]
    def value: Var.Aux[Int, v.type] = ScrollBar.Value.asInstanceOf[Var.Aux[Int, v.type]]
    def valueIsAdjusting: Var.Aux[Boolean, v.type] = ScrollBar.ValueIsAdjusting.asInstanceOf[Var.Aux[Boolean, v.type]]
    def visibleAmount: Var.Aux[Int, v.type] = ScrollBar.VisibleAmount.asInstanceOf[Var.Aux[Int, v.type]]

    

    def adjustmentListeners: Array[java.awt.event.AdjustmentListener] = v.getAdjustmentListeners.asInstanceOf
    def unwrap: javax.swing.JScrollBar = v
  }

  def wrap(v: javax.swing.JScrollBar) = v.asInstanceOf[ScrollBar]

  def init(v: ScrollBar): Scenegraph ?=> Unit = (using sc: Scenegraph) => {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    
    
  }
  def uninitialized(): ScrollBar = {
    val res = javax.swing.JScrollBar().asInstanceOf[ScrollBar]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.ScrollBarUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    blockIncrement: Opt[Binding[Int]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[javax.swing.JPopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    maximum: Opt[Binding[Int]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minimum: Opt[Binding[Int]] = UnsetParam,
    model: Opt[Binding[javax.swing.BoundedRangeModel]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    orientation: Opt[Binding[Int]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    unitIncrement: Opt[Binding[Int]] = UnsetParam,
    value: Opt[Binding[Int]] = UnsetParam,
    valueIsAdjusting: Opt[Binding[Boolean]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam,
    visibleAmount: Opt[Binding[Int]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[ScrollBar] = {
    val res = uninitialized()
    ScrollBar.init(res)
    ifSet(UI, ScrollBar.ops.extension_UI(res) := _)
    ifSet(actionMap, Component.ops.extension_actionMap(res) := _)
    ifSet(alignmentX, Component.ops.extension_alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.extension_alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.extension_autoscrolls(res) := _)
    ifSet(background, Node.ops.extension_background(res) := _)
    ifSet(blockIncrement, ScrollBar.ops.extension_blockIncrement(res) := _)
    ifSet(border, Component.ops.extension_border(res) := _)
    ifSet(bounds, Node.ops.extension_bounds(res) := _)
    ifSet(componentOrientation, Node.ops.extension_componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.extension_componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.extension_cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.extension_debugGraphicsOptions(res) := _)
    ifSet(doubleBuffered, Component.ops.extension_doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.extension_enabled(res) := _)
    ifSet(focusable, Node.ops.extension_focusable(res) := _)
    ifSet(font, Node.ops.extension_font(res) := _)
    ifSet(foreground, Node.ops.extension_foreground(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.extension_inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.extension_inputVerifier(res) := _)
    ifSet(maxSize, Node.ops.extension_maxSize(res) := _)
    ifSet(maximum, ScrollBar.ops.extension_maximum(res) := _)
    ifSet(minSize, Node.ops.extension_minSize(res) := _)
    ifSet(minimum, ScrollBar.ops.extension_minimum(res) := _)
    ifSet(model, ScrollBar.ops.extension_model(res) := _)
    ifSet(mouseDragMut, Node.ops.extension_mouseDragMut(res) := _)
    ifSet(name, Node.ops.extension_name(res) := _)
    ifSet(opaque, Component.ops.extension_opaque(res) := _)
    ifSet(orientation, ScrollBar.ops.extension_orientation(res) := _)
    ifSet(prefSize, Node.ops.extension_prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.extension_requestFocusEnabled(res) := _)
    ifSet(toolTipText, Component.ops.extension_toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.extension_transferHandler(res) := _)
    ifSet(unitIncrement, ScrollBar.ops.extension_unitIncrement(res) := _)
    ifSet(value, ScrollBar.ops.extension_value(res) := _)
    ifSet(valueIsAdjusting, ScrollBar.ops.extension_valueIsAdjusting(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.extension_verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.extension_visible(res) := _)
    ifSet(visibleAmount, ScrollBar.ops.extension_visibleAmount(res) := _)
    res
  }
  
}