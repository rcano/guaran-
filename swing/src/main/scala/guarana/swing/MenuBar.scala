//AUTOGENERATED FILE, DO NOT MODIFY

package guarana
package swing

import language.implicitConversions
import java.awt.{Component => _, MenuBar => _, MenuItem => _, TextComponent => _, TextField => _, PopupMenu => _, *}
import java.awt.event.*
import javax.swing.{Action => _, *}
import javax.swing.event.*
import guarana.util.*
import guarana.swing.util.*
import scala.jdk.CollectionConverters.*
import scala.util.chaining.*

opaque type MenuBar <: Component  = javax.swing.JMenuBar & Component
object MenuBar extends VarsMap {
  val UI: SwingVar.Aux[MenuBar, javax.swing.plaf.MenuBarUI | Null] = SwingVar[MenuBar, javax.swing.plaf.MenuBarUI | Null]("UI", _.getUI, _.setUI(_))
  val BorderPainted: SwingVar.Aux[MenuBar, Boolean] = SwingVar[MenuBar, Boolean]("borderPainted", _.isBorderPainted, _.setBorderPainted(_))
  val HelpMenu: SwingVar.Aux[MenuBar, javax.swing.JMenu | Null] = SwingVar[MenuBar, javax.swing.JMenu | Null]("helpMenu", _.getHelpMenu, _.setHelpMenu(_))
  val Margin: SwingVar.Aux[MenuBar, java.awt.Insets | Null] = SwingVar[MenuBar, java.awt.Insets | Null]("margin", _.getMargin, _.setMargin(_))
  val SelectionModel: SwingVar.Aux[MenuBar, javax.swing.SingleSelectionModel | Null] = SwingVar[MenuBar, javax.swing.SingleSelectionModel | Null]("selectionModel", _.getSelectionModel, _.setSelectionModel(_))

  

  given ops: Ops.type = Ops
  object Ops {
    extension (v: MenuBar) {
      def UI: Var.Aux[javax.swing.plaf.MenuBarUI | Null, v.type] = MenuBar.UI.asInstanceOf[Var.Aux[javax.swing.plaf.MenuBarUI | Null, v.type]]
      def borderPainted: Var.Aux[Boolean, v.type] = MenuBar.BorderPainted.asInstanceOf[Var.Aux[Boolean, v.type]]
      def helpMenu: Var.Aux[javax.swing.JMenu | Null, v.type] = MenuBar.HelpMenu.asInstanceOf[Var.Aux[javax.swing.JMenu | Null, v.type]]
      def margin: Var.Aux[java.awt.Insets | Null, v.type] = MenuBar.Margin.asInstanceOf[Var.Aux[java.awt.Insets | Null, v.type]]
      def selectionModel: Var.Aux[javax.swing.SingleSelectionModel | Null, v.type] = MenuBar.SelectionModel.asInstanceOf[Var.Aux[javax.swing.SingleSelectionModel | Null, v.type]]

      

      def component: java.awt.Component | Null = v.getComponent
      def menuCount: Int = v.getMenuCount
      def selected: Boolean = v.isSelected
      def subElements: Array[javax.swing.MenuElement | Null] = v.getSubElements.nn
      def unwrap: javax.swing.JMenuBar = v
    }
  }

  def wrap(v: javax.swing.JMenuBar) = v.asInstanceOf[MenuBar]

  def init(v: MenuBar): Scenegraph ?=> Unit = (sc: Scenegraph) ?=> {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    
    
  }
  def uninitialized(): MenuBar = {
    val res = javax.swing.JMenuBar().asInstanceOf[MenuBar]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.MenuBarUI | Null]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    borderPainted: Opt[Binding[Boolean]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[PopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    helpMenu: Opt[Binding[javax.swing.JMenu | Null]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    margin: Opt[Binding[java.awt.Insets | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    selectionModel: Opt[Binding[javax.swing.SingleSelectionModel | Null]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[MenuBar] = {
    val res = uninitialized()
    MenuBar.init(res)
    ifSet(UI, MenuBar.ops.UI(res) := _)
    ifSet(actionMap, Component.ops.actionMap(res) := _)
    ifSet(alignmentX, Component.ops.alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.autoscrolls(res) := _)
    ifSet(background, Node.ops.background(res) := _)
    ifSet(border, Component.ops.border(res) := _)
    ifSet(borderPainted, MenuBar.ops.borderPainted(res) := _)
    ifSet(bounds, Node.ops.bounds(res) := _)
    ifSet(componentOrientation, Node.ops.componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.debugGraphicsOptions(res) := _)
    ifSet(doubleBuffered, Component.ops.doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.enabled(res) := _)
    ifSet(focusable, Node.ops.focusable(res) := _)
    ifSet(font, Node.ops.font(res) := _)
    ifSet(foreground, Node.ops.foreground(res) := _)
    ifSet(helpMenu, MenuBar.ops.helpMenu(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.inputVerifier(res) := _)
    ifSet(margin, MenuBar.ops.margin(res) := _)
    ifSet(maxSize, Node.ops.maxSize(res) := _)
    ifSet(minSize, Node.ops.minSize(res) := _)
    ifSet(name, Node.ops.name(res) := _)
    ifSet(opaque, Component.ops.opaque(res) := _)
    ifSet(prefSize, Node.ops.prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.requestFocusEnabled(res) := _)
    ifSet(selectionModel, MenuBar.ops.selectionModel(res) := _)
    ifSet(toolTipText, Component.ops.toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.transferHandler(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.visible(res) := _)
    res
  }
  
}