//AUTOGENERATED FILE, DO NOT MODIFY

package guarana
package swing

import language.implicitConversions
import java.awt.{Component as _, Menu as _, MenuBar as _, MenuItem as _, TextComponent as _, TextField as _, PopupMenu as _}
import javax.swing.Action as _
import javax.swing.event.*

opaque type TextComponent <: Component  = javax.swing.text.JTextComponent & Component
object TextComponent extends VarsMap {
  val UI: SwingVar.Aux[TextComponent, javax.swing.plaf.TextUI] = SwingVar[TextComponent, javax.swing.plaf.TextUI]("UI", _.getUI.nn, _.setUI(_))
  val Caret: SwingVar.Aux[TextComponent, javax.swing.text.Caret] = SwingVar[TextComponent, javax.swing.text.Caret]("caret", _.getCaret.nn, _.setCaret(_))
  val CaretColor: SwingVar.Aux[TextComponent, java.awt.Color | Null] = SwingVar[TextComponent, java.awt.Color | Null]("caretColor", _.getCaretColor, _.setCaretColor(_))
  private val CurrentText: Var[String] = Var[String]("currentText", "", false)
  val DisabledTextColor: SwingVar.Aux[TextComponent, java.awt.Color | Null] = SwingVar[TextComponent, java.awt.Color | Null]("disabledTextColor", _.getDisabledTextColor, _.setDisabledTextColor(_))
  val Document: SwingVar.Aux[TextComponent, javax.swing.text.Document] = SwingVar[TextComponent, javax.swing.text.Document]("document", _.getDocument.nn, _.setDocument(_))
  val DragEnabled: SwingVar.Aux[TextComponent, Boolean] = SwingVar[TextComponent, Boolean]("dragEnabled", _.getDragEnabled, _.setDragEnabled(_))
  val DropMode: SwingVar.Aux[TextComponent, javax.swing.DropMode | Null] = SwingVar[TextComponent, javax.swing.DropMode | Null]("dropMode", _.getDropMode, _.setDropMode(_))
  val Editable: SwingVar.Aux[TextComponent, Boolean] = SwingVar[TextComponent, Boolean]("editable", _.isEditable, _.setEditable(_))
  val FocusAccelerator: SwingVar.Aux[TextComponent, Char] = SwingVar[TextComponent, Char]("focusAccelerator", _.getFocusAccelerator, _.setFocusAccelerator(_))
  val Highlighter: SwingVar.Aux[TextComponent, javax.swing.text.Highlighter | Null] = SwingVar[TextComponent, javax.swing.text.Highlighter | Null]("highlighter", _.getHighlighter, _.setHighlighter(_))
  val Keymap: SwingVar.Aux[TextComponent, javax.swing.text.Keymap | Null] = SwingVar[TextComponent, javax.swing.text.Keymap | Null]("keymap", _.getKeymap, _.setKeymap(_))
  val Margin: SwingVar.Aux[TextComponent, java.awt.Insets | Null] = SwingVar[TextComponent, java.awt.Insets | Null]("margin", _.getMargin, _.setMargin(_))
  val NavigationFilter: SwingVar.Aux[TextComponent, javax.swing.text.NavigationFilter | Null] = SwingVar[TextComponent, javax.swing.text.NavigationFilter | Null]("navigationFilter", _.getNavigationFilter, _.setNavigationFilter(_))
  val SelectedTextColor: SwingVar.Aux[TextComponent, java.awt.Color | Null] = SwingVar[TextComponent, java.awt.Color | Null]("selectedTextColor", _.getSelectedTextColor, _.setSelectedTextColor(_))
  val SelectionColor: SwingVar.Aux[TextComponent, java.awt.Color | Null] = SwingVar[TextComponent, java.awt.Color | Null]("selectionColor", _.getSelectionColor, _.setSelectionColor(_))

  

  given ops: Ops.type = Ops
  object Ops {
    extension (v: TextComponent) {
      def UI: Var.Aux[javax.swing.plaf.TextUI, v.type] = TextComponent.UI.asInstanceOf[Var.Aux[javax.swing.plaf.TextUI, v.type]]
      def caret: Var.Aux[javax.swing.text.Caret, v.type] = TextComponent.Caret.asInstanceOf[Var.Aux[javax.swing.text.Caret, v.type]]
      def caretColor: Var.Aux[java.awt.Color | Null, v.type] = TextComponent.CaretColor.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def disabledTextColor: Var.Aux[java.awt.Color | Null, v.type] = TextComponent.DisabledTextColor.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def document: Var.Aux[javax.swing.text.Document, v.type] = TextComponent.Document.asInstanceOf[Var.Aux[javax.swing.text.Document, v.type]]
      def dragEnabled: Var.Aux[Boolean, v.type] = TextComponent.DragEnabled.asInstanceOf[Var.Aux[Boolean, v.type]]
      def dropMode: Var.Aux[javax.swing.DropMode | Null, v.type] = TextComponent.DropMode.asInstanceOf[Var.Aux[javax.swing.DropMode | Null, v.type]]
      def editable: Var.Aux[Boolean, v.type] = TextComponent.Editable.asInstanceOf[Var.Aux[Boolean, v.type]]
      def focusAccelerator: Var.Aux[Char, v.type] = TextComponent.FocusAccelerator.asInstanceOf[Var.Aux[Char, v.type]]
      def highlighter: Var.Aux[javax.swing.text.Highlighter | Null, v.type] = TextComponent.Highlighter.asInstanceOf[Var.Aux[javax.swing.text.Highlighter | Null, v.type]]
      def keymap: Var.Aux[javax.swing.text.Keymap | Null, v.type] = TextComponent.Keymap.asInstanceOf[Var.Aux[javax.swing.text.Keymap | Null, v.type]]
      def margin: Var.Aux[java.awt.Insets | Null, v.type] = TextComponent.Margin.asInstanceOf[Var.Aux[java.awt.Insets | Null, v.type]]
      def navigationFilter: Var.Aux[javax.swing.text.NavigationFilter | Null, v.type] = TextComponent.NavigationFilter.asInstanceOf[Var.Aux[javax.swing.text.NavigationFilter | Null, v.type]]
      def selectedTextColor: Var.Aux[java.awt.Color | Null, v.type] = TextComponent.SelectedTextColor.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def selectionColor: Var.Aux[java.awt.Color | Null, v.type] = TextComponent.SelectionColor.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]

      

      def actions = v.getActions
      def caretListeners = v.getCaretListeners
      def dropLocation = v.getDropLocation
      def preferredScrollableViewportSize = v.getPreferredScrollableViewportSize
      def scrollableTracksViewportHeight = v.getScrollableTracksViewportHeight
      def scrollableTracksViewportWidth = v.getScrollableTracksViewportWidth
      def selectedText = v.getSelectedText
      def text = v.getText.nn
      def text_=(s: String) = v.setText(s)
      def currentText: ObsVal.Aux[String, v.type] = TextComponent.CurrentText.asInstanceOf[ObsVal.Aux[String, v.type]]
      def unwrap: javax.swing.text.JTextComponent = v
    }
  }

  def wrap(v: javax.swing.text.JTextComponent) = v.asInstanceOf[TextComponent]

  def init(v: TextComponent): Scenegraph ?=> Unit = (sc: Scenegraph) ?=> {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    v.getDocument.nn.addDocumentListener(new DocumentListener {
      def changedUpdate(evt: DocumentEvent | Null) = notifyChange()
      def insertUpdate(evt: DocumentEvent | Null) = notifyChange()
      def removeUpdate(evt: DocumentEvent | Null) = notifyChange()
      def notifyChange() = summon[Scenegraph].update(TextComponent.CurrentText.forInstance(v) := v.text)
    })
    
  }
  
  
}