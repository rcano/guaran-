//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, MenuBar => _, MenuItem => _, TextComponent => _, TextField => _, PopupMenu => _, _}
import java.awt.event._
import javax.swing.{Action => _, _}
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type TableView <: Component  = javax.swing.JTable & Component
object TableView extends VarsMap {
  val UI: SwingVar.Aux[TableView, javax.swing.plaf.TableUI] = SwingVar[TableView, javax.swing.plaf.TableUI]("UI", _.getUI.nn, _.setUI(_))
  val AutoCreateColumnsFromModel: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("autoCreateColumnsFromModel", _.getAutoCreateColumnsFromModel, _.setAutoCreateColumnsFromModel(_))
  val AutoCreateRowSorter: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("autoCreateRowSorter", _.getAutoCreateRowSorter, _.setAutoCreateRowSorter(_))
  val AutoResizeMode: SwingVar.Aux[TableView, Int] = SwingVar[TableView, Int]("autoResizeMode", _.getAutoResizeMode, _.setAutoResizeMode(_))
  val CellEditor: SwingVar.Aux[TableView, javax.swing.table.TableCellEditor] = SwingVar[TableView, javax.swing.table.TableCellEditor]("cellEditor", _.getCellEditor.nn, _.setCellEditor(_))
  val CellSelectionEnabled: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("cellSelectionEnabled", _.getCellSelectionEnabled, _.setCellSelectionEnabled(_))
  val ColumnModel: SwingVar.Aux[TableView, javax.swing.table.TableColumnModel] = SwingVar[TableView, javax.swing.table.TableColumnModel]("columnModel", _.getColumnModel.nn, _.setColumnModel(_))
  val ColumnSelectionAllowed: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("columnSelectionAllowed", _.getColumnSelectionAllowed, _.setColumnSelectionAllowed(_))
  val DragEnabled: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("dragEnabled", _.getDragEnabled, _.setDragEnabled(_))
  val DropMode: SwingVar.Aux[TableView, javax.swing.DropMode | Null] = SwingVar[TableView, javax.swing.DropMode | Null]("dropMode", _.getDropMode, _.setDropMode(_))
  val EditingColumn: SwingVar.Aux[TableView, Int] = SwingVar[TableView, Int]("editingColumn", _.getEditingColumn, _.setEditingColumn(_))
  val EditingRow: SwingVar.Aux[TableView, Int] = SwingVar[TableView, Int]("editingRow", _.getEditingRow, _.setEditingRow(_))
  val FillsViewportHeight: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("fillsViewportHeight", _.getFillsViewportHeight, _.setFillsViewportHeight(_))
  val GridColor: SwingVar.Aux[TableView, java.awt.Color | Null] = SwingVar[TableView, java.awt.Color | Null]("gridColor", _.getGridColor, _.setGridColor(_))
  val IntercellSpacing: SwingVar.Aux[TableView, (Double, Double) | Null] = SwingVar[TableView, (Double, Double) | Null]("intercellSpacing", {n => val d = n.getIntercellSpacing; if (d != null) (d.getWidth, d.getHeight) else null}, {(n, d) => n.setIntercellSpacing(d.?(d => java.awt.Dimension(d._1.toInt, d._2.toInt)))})
  val Model: SwingVar.Aux[TableView, javax.swing.table.TableModel] = SwingVar[TableView, javax.swing.table.TableModel]("model", _.getModel.nn, _.setModel(_))
  val PreferredScrollableViewportSize: SwingVar.Aux[TableView, (Double, Double) | Null] = SwingVar[TableView, (Double, Double) | Null]("preferredScrollableViewportSize", {n => val d = n.getPreferredScrollableViewportSize; if (d != null) (d.getWidth, d.getHeight) else null}, {(n, d) => n.setPreferredScrollableViewportSize(d.?(d => java.awt.Dimension(d._1.toInt, d._2.toInt)))})
  val RowHeight: SwingVar.Aux[TableView, Int] = SwingVar[TableView, Int]("rowHeight", _.getRowHeight, _.setRowHeight(_))
  val RowMargin: SwingVar.Aux[TableView, Int] = SwingVar[TableView, Int]("rowMargin", _.getRowMargin, _.setRowMargin(_))
  val RowSelectionAllowed: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("rowSelectionAllowed", _.getRowSelectionAllowed, _.setRowSelectionAllowed(_))
  val RowSorter: SwingVar.Aux[TableView, javax.swing.RowSorter[_ <: javax.swing.table.TableModel] | Null] = SwingVar[TableView, javax.swing.RowSorter[_ <: javax.swing.table.TableModel] | Null]("rowSorter", _.getRowSorter, _.setRowSorter(_))
  private val SelectedRowsMut: Var[Array[Int]] = Var[Array[Int]]("selectedRowsMut", Array(), false)
  val SelectionBackground: SwingVar.Aux[TableView, java.awt.Color | Null] = SwingVar[TableView, java.awt.Color | Null]("selectionBackground", _.getSelectionBackground, _.setSelectionBackground(_))
  val SelectionForeground: SwingVar.Aux[TableView, java.awt.Color | Null] = SwingVar[TableView, java.awt.Color | Null]("selectionForeground", _.getSelectionForeground, _.setSelectionForeground(_))
  val SelectionModel: SwingVar.Aux[TableView, javax.swing.ListSelectionModel] = SwingVar[TableView, javax.swing.ListSelectionModel]("selectionModel", _.getSelectionModel.nn, _.setSelectionModel(_))
  val ShowHorizontalLines: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("showHorizontalLines", _.getShowHorizontalLines, _.setShowHorizontalLines(_))
  val ShowVerticalLines: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("showVerticalLines", _.getShowVerticalLines, _.setShowVerticalLines(_))
  val SurrendersFocusOnKeystroke: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("surrendersFocusOnKeystroke", _.getSurrendersFocusOnKeystroke, _.setSurrendersFocusOnKeystroke(_))
  val TableHeader: SwingVar.Aux[TableView, javax.swing.table.JTableHeader | Null] = SwingVar[TableView, javax.swing.table.JTableHeader | Null]("tableHeader", _.getTableHeader, _.setTableHeader(_))
  val UpdateSelectionOnSort: SwingVar.Aux[TableView, Boolean] = SwingVar[TableView, Boolean]("updateSelectionOnSort", _.getUpdateSelectionOnSort, _.setUpdateSelectionOnSort(_))

  

  given ops: Ops.type = Ops
  object Ops {
    extension (v: TableView) {
      def UI: Var.Aux[javax.swing.plaf.TableUI, v.type] = TableView.UI.asInstanceOf[Var.Aux[javax.swing.plaf.TableUI, v.type]]
      def autoCreateColumnsFromModel: Var.Aux[Boolean, v.type] = TableView.AutoCreateColumnsFromModel.asInstanceOf[Var.Aux[Boolean, v.type]]
      def autoCreateRowSorter: Var.Aux[Boolean, v.type] = TableView.AutoCreateRowSorter.asInstanceOf[Var.Aux[Boolean, v.type]]
      def autoResizeMode: Var.Aux[Int, v.type] = TableView.AutoResizeMode.asInstanceOf[Var.Aux[Int, v.type]]
      def cellEditor: Var.Aux[javax.swing.table.TableCellEditor, v.type] = TableView.CellEditor.asInstanceOf[Var.Aux[javax.swing.table.TableCellEditor, v.type]]
      def cellSelectionEnabled: Var.Aux[Boolean, v.type] = TableView.CellSelectionEnabled.asInstanceOf[Var.Aux[Boolean, v.type]]
      def columnModel: Var.Aux[javax.swing.table.TableColumnModel, v.type] = TableView.ColumnModel.asInstanceOf[Var.Aux[javax.swing.table.TableColumnModel, v.type]]
      def columnSelectionAllowed: Var.Aux[Boolean, v.type] = TableView.ColumnSelectionAllowed.asInstanceOf[Var.Aux[Boolean, v.type]]
      def dragEnabled: Var.Aux[Boolean, v.type] = TableView.DragEnabled.asInstanceOf[Var.Aux[Boolean, v.type]]
      def dropMode: Var.Aux[javax.swing.DropMode | Null, v.type] = TableView.DropMode.asInstanceOf[Var.Aux[javax.swing.DropMode | Null, v.type]]
      def editingColumn: Var.Aux[Int, v.type] = TableView.EditingColumn.asInstanceOf[Var.Aux[Int, v.type]]
      def editingRow: Var.Aux[Int, v.type] = TableView.EditingRow.asInstanceOf[Var.Aux[Int, v.type]]
      def fillsViewportHeight: Var.Aux[Boolean, v.type] = TableView.FillsViewportHeight.asInstanceOf[Var.Aux[Boolean, v.type]]
      def gridColor: Var.Aux[java.awt.Color | Null, v.type] = TableView.GridColor.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def intercellSpacing: Var.Aux[(Double, Double) | Null, v.type] = TableView.IntercellSpacing.asInstanceOf[Var.Aux[(Double, Double) | Null, v.type]]
      def model: Var.Aux[javax.swing.table.TableModel, v.type] = TableView.Model.asInstanceOf[Var.Aux[javax.swing.table.TableModel, v.type]]
      def preferredScrollableViewportSize: Var.Aux[(Double, Double) | Null, v.type] = TableView.PreferredScrollableViewportSize.asInstanceOf[Var.Aux[(Double, Double) | Null, v.type]]
      def rowHeight: Var.Aux[Int, v.type] = TableView.RowHeight.asInstanceOf[Var.Aux[Int, v.type]]
      def rowMargin: Var.Aux[Int, v.type] = TableView.RowMargin.asInstanceOf[Var.Aux[Int, v.type]]
      def rowSelectionAllowed: Var.Aux[Boolean, v.type] = TableView.RowSelectionAllowed.asInstanceOf[Var.Aux[Boolean, v.type]]
      def rowSorter: Var.Aux[javax.swing.RowSorter[_ <: javax.swing.table.TableModel] | Null, v.type] = TableView.RowSorter.asInstanceOf[Var.Aux[javax.swing.RowSorter[_ <: javax.swing.table.TableModel] | Null, v.type]]
      def selectionBackground: Var.Aux[java.awt.Color | Null, v.type] = TableView.SelectionBackground.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def selectionForeground: Var.Aux[java.awt.Color | Null, v.type] = TableView.SelectionForeground.asInstanceOf[Var.Aux[java.awt.Color | Null, v.type]]
      def selectionModel: Var.Aux[javax.swing.ListSelectionModel, v.type] = TableView.SelectionModel.asInstanceOf[Var.Aux[javax.swing.ListSelectionModel, v.type]]
      def showHorizontalLines: Var.Aux[Boolean, v.type] = TableView.ShowHorizontalLines.asInstanceOf[Var.Aux[Boolean, v.type]]
      def showVerticalLines: Var.Aux[Boolean, v.type] = TableView.ShowVerticalLines.asInstanceOf[Var.Aux[Boolean, v.type]]
      def surrendersFocusOnKeystroke: Var.Aux[Boolean, v.type] = TableView.SurrendersFocusOnKeystroke.asInstanceOf[Var.Aux[Boolean, v.type]]
      def tableHeader: Var.Aux[javax.swing.table.JTableHeader | Null, v.type] = TableView.TableHeader.asInstanceOf[Var.Aux[javax.swing.table.JTableHeader | Null, v.type]]
      def updateSelectionOnSort: Var.Aux[Boolean, v.type] = TableView.UpdateSelectionOnSort.asInstanceOf[Var.Aux[Boolean, v.type]]

      

      def columnCount: Int = v.getColumnCount
      def columnIndexToModel(row: Int): Int = v.convertColumnIndexToModel(row)
      def columnIndexToView(row: Int): Int = v.convertColumnIndexToView(row)
      def dropLocation: javax.swing.JTable.DropLocation | Null = v.getDropLocation
      def editing: Boolean = v.isEditing
      def editorComponent: java.awt.Component | Null = v.getEditorComponent
      def rowCount: Int = v.getRowCount
      def rowIndexToModel(row: Int): Int = v.convertRowIndexToModel(row)
      def rowIndexToView(row: Int): Int = v.convertRowIndexToView(row)
      def scrollableTracksViewportHeight: Boolean = v.getScrollableTracksViewportHeight
      def scrollableTracksViewportWidth: Boolean = v.getScrollableTracksViewportWidth
      def selectedColumn: Int = v.getSelectedColumn
      def selectedColumnCount: Int = v.getSelectedColumnCount
      def selectedColumns: Array[Int] = v.getSelectedColumns.nn
      def selectedRow: Int = v.getSelectedRow
      def selectedRowCount: Int = v.getSelectedRowCount
      def selectedRows = TableView.SelectedRowsMut.asObsValIn(v)
      def unwrap: javax.swing.JTable = v
    }
  }

  def wrap(v: javax.swing.JTable) = v.asInstanceOf[TableView]

  def init(v: TableView): Scenegraph ?=> Unit = (sc: Scenegraph) ?=> {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    v.getSelectionModel.addListSelectionListener(selectionEvt => 
      sc.update(SelectedRowsMut.forInstance(v) := v.getSelectedRows))
    
  }
  def uninitialized(): TableView = {
    val res = javax.swing.JTable().asInstanceOf[TableView]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.TableUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoCreateColumnsFromModel: Opt[Binding[Boolean]] = UnsetParam,
    autoCreateRowSorter: Opt[Binding[Boolean]] = UnsetParam,
    autoResizeMode: Opt[Binding[Int]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    cellEditor: Opt[Binding[javax.swing.table.TableCellEditor]] = UnsetParam,
    cellSelectionEnabled: Opt[Binding[Boolean]] = UnsetParam,
    columnModel: Opt[Binding[javax.swing.table.TableColumnModel]] = UnsetParam,
    columnSelectionAllowed: Opt[Binding[Boolean]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[PopupMenu | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    dragEnabled: Opt[Binding[Boolean]] = UnsetParam,
    dropMode: Opt[Binding[javax.swing.DropMode | Null]] = UnsetParam,
    editingColumn: Opt[Binding[Int]] = UnsetParam,
    editingRow: Opt[Binding[Int]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    fillsViewportHeight: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    gridColor: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    hoveredMut: Opt[Binding[Boolean]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    intercellSpacing: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    model: Opt[Binding[javax.swing.table.TableModel]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    preferredScrollableViewportSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    rowHeight: Opt[Binding[Int]] = UnsetParam,
    rowMargin: Opt[Binding[Int]] = UnsetParam,
    rowSelectionAllowed: Opt[Binding[Boolean]] = UnsetParam,
    rowSorter: Opt[Binding[javax.swing.RowSorter[_ <: javax.swing.table.TableModel] | Null]] = UnsetParam,
    selectionBackground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    selectionForeground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    selectionModel: Opt[Binding[javax.swing.ListSelectionModel]] = UnsetParam,
    showHorizontalLines: Opt[Binding[Boolean]] = UnsetParam,
    showVerticalLines: Opt[Binding[Boolean]] = UnsetParam,
    surrendersFocusOnKeystroke: Opt[Binding[Boolean]] = UnsetParam,
    tableHeader: Opt[Binding[javax.swing.table.JTableHeader | Null]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    updateSelectionOnSort: Opt[Binding[Boolean]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[TableView] = {
    val res = uninitialized()
    TableView.init(res)
    ifSet(UI, TableView.ops.UI(res) := _)
    ifSet(actionMap, Component.ops.actionMap(res) := _)
    ifSet(alignmentX, Component.ops.alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.alignmentY(res) := _)
    ifSet(autoCreateColumnsFromModel, TableView.ops.autoCreateColumnsFromModel(res) := _)
    ifSet(autoCreateRowSorter, TableView.ops.autoCreateRowSorter(res) := _)
    ifSet(autoResizeMode, TableView.ops.autoResizeMode(res) := _)
    ifSet(autoscrolls, Component.ops.autoscrolls(res) := _)
    ifSet(background, Node.ops.background(res) := _)
    ifSet(border, Component.ops.border(res) := _)
    ifSet(bounds, Node.ops.bounds(res) := _)
    ifSet(cellEditor, TableView.ops.cellEditor(res) := _)
    ifSet(cellSelectionEnabled, TableView.ops.cellSelectionEnabled(res) := _)
    ifSet(columnModel, TableView.ops.columnModel(res) := _)
    ifSet(columnSelectionAllowed, TableView.ops.columnSelectionAllowed(res) := _)
    ifSet(componentOrientation, Node.ops.componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.componentPopupMenu(res) := _)
    ifSet(cursor, Node.ops.cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.debugGraphicsOptions(res) := _)
    ifSet(doubleBuffered, Component.ops.doubleBuffered(res) := _)
    ifSet(dragEnabled, TableView.ops.dragEnabled(res) := _)
    ifSet(dropMode, TableView.ops.dropMode(res) := _)
    ifSet(editingColumn, TableView.ops.editingColumn(res) := _)
    ifSet(editingRow, TableView.ops.editingRow(res) := _)
    ifSet(enabled, Node.ops.enabled(res) := _)
    ifSet(fillsViewportHeight, TableView.ops.fillsViewportHeight(res) := _)
    ifSet(focusable, Node.ops.focusable(res) := _)
    ifSet(font, Node.ops.font(res) := _)
    ifSet(foreground, Node.ops.foreground(res) := _)
    ifSet(gridColor, TableView.ops.gridColor(res) := _)
    ifSet(hoveredMut, Node.ops.hoveredMut(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.inputVerifier(res) := _)
    ifSet(intercellSpacing, TableView.ops.intercellSpacing(res) := _)
    ifSet(maxSize, Node.ops.maxSize(res) := _)
    ifSet(minSize, Node.ops.minSize(res) := _)
    ifSet(model, TableView.ops.model(res) := _)
    ifSet(mouseDragMut, Node.ops.mouseDragMut(res) := _)
    ifSet(name, Node.ops.name(res) := _)
    ifSet(opaque, Component.ops.opaque(res) := _)
    ifSet(prefSize, Node.ops.prefSize(res) := _)
    ifSet(preferredScrollableViewportSize, TableView.ops.preferredScrollableViewportSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.requestFocusEnabled(res) := _)
    ifSet(rowHeight, TableView.ops.rowHeight(res) := _)
    ifSet(rowMargin, TableView.ops.rowMargin(res) := _)
    ifSet(rowSelectionAllowed, TableView.ops.rowSelectionAllowed(res) := _)
    ifSet(rowSorter, TableView.ops.rowSorter(res) := _)
    ifSet(selectionBackground, TableView.ops.selectionBackground(res) := _)
    ifSet(selectionForeground, TableView.ops.selectionForeground(res) := _)
    ifSet(selectionModel, TableView.ops.selectionModel(res) := _)
    ifSet(showHorizontalLines, TableView.ops.showHorizontalLines(res) := _)
    ifSet(showVerticalLines, TableView.ops.showVerticalLines(res) := _)
    ifSet(surrendersFocusOnKeystroke, TableView.ops.surrendersFocusOnKeystroke(res) := _)
    ifSet(tableHeader, TableView.ops.tableHeader(res) := _)
    ifSet(toolTipText, Component.ops.toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.transferHandler(res) := _)
    ifSet(updateSelectionOnSort, TableView.ops.updateSelectionOnSort(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.visible(res) := _)
    res
  }
  
}