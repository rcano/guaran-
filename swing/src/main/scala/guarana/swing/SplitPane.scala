//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, MenuBar => _, MenuItem => _, TextComponent => _, TextField => _, PopupMenu => _, _}
import java.awt.event._
import javax.swing.{Action => _, _}
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type SplitPane <: Component  = javax.swing.JSplitPane & Component
object SplitPane extends VarsMap {
  val UI: SwingVar.Aux[SplitPane, javax.swing.plaf.SplitPaneUI] = SwingVar[SplitPane, javax.swing.plaf.SplitPaneUI]("UI", _.getUI.nn, _.setUI(_))
  val ComponentA: SwingVar.Aux[SplitPane, Component | Null] = SwingVar[SplitPane, Component | Null]("componentA", _.getLeftComponent.asInstanceOf, (p, c) => p.setLeftComponent(c.?(_.unwrap)))
  val ComponentB: SwingVar.Aux[SplitPane, Component | Null] = SwingVar[SplitPane, Component | Null]("componentB", _.getRightComponent.asInstanceOf, (p, c) => p.setRightComponent(c.?(_.unwrap)))
  val ContinuousLayout: SwingVar.Aux[SplitPane, Boolean] = SwingVar[SplitPane, Boolean]("continuousLayout", _.isContinuousLayout, _.setContinuousLayout(_))
  val DividerLocation: SwingVar.Aux[SplitPane, Int] = SwingVar[SplitPane, Int]("dividerLocation", _.getDividerLocation, _.setDividerLocation(_))
  val DividerSize: SwingVar.Aux[SplitPane, Int] = SwingVar[SplitPane, Int]("dividerSize", _.getDividerSize, _.setDividerSize(_))
  val Horizontal: SwingVar.Aux[SplitPane, Boolean] = SwingVar[SplitPane, Boolean]("horizontal", _.getOrientation == JSplitPane.HORIZONTAL_SPLIT, (s, h) => s.setOrientation(if (h) JSplitPane.HORIZONTAL_SPLIT else JSplitPane.VERTICAL_SPLIT))
  val LastDividerLocation: SwingVar.Aux[SplitPane, Int] = SwingVar[SplitPane, Int]("lastDividerLocation", _.getLastDividerLocation, _.setLastDividerLocation(_))
  val OneTouchExpandable: SwingVar.Aux[SplitPane, Boolean] = SwingVar[SplitPane, Boolean]("oneTouchExpandable", _.isOneTouchExpandable, _.setOneTouchExpandable(_))
  val ResizeWeight: SwingVar.Aux[SplitPane, Double] = SwingVar[SplitPane, Double]("resizeWeight", _.getResizeWeight, _.setResizeWeight(_))

  

  given ops as Ops.type = Ops
  object Ops {
    extension (v: SplitPane) {
      def UI: Var.Aux[javax.swing.plaf.SplitPaneUI, v.type] = SplitPane.UI.asInstanceOf[Var.Aux[javax.swing.plaf.SplitPaneUI, v.type]]
      def componentA: Var.Aux[Component | Null, v.type] = SplitPane.ComponentA.asInstanceOf[Var.Aux[Component | Null, v.type]]
      def componentB: Var.Aux[Component | Null, v.type] = SplitPane.ComponentB.asInstanceOf[Var.Aux[Component | Null, v.type]]
      def continuousLayout: Var.Aux[Boolean, v.type] = SplitPane.ContinuousLayout.asInstanceOf[Var.Aux[Boolean, v.type]]
      def dividerLocation: Var.Aux[Int, v.type] = SplitPane.DividerLocation.asInstanceOf[Var.Aux[Int, v.type]]
      def dividerSize: Var.Aux[Int, v.type] = SplitPane.DividerSize.asInstanceOf[Var.Aux[Int, v.type]]
      def horizontal: Var.Aux[Boolean, v.type] = SplitPane.Horizontal.asInstanceOf[Var.Aux[Boolean, v.type]]
      def lastDividerLocation: Var.Aux[Int, v.type] = SplitPane.LastDividerLocation.asInstanceOf[Var.Aux[Int, v.type]]
      def oneTouchExpandable: Var.Aux[Boolean, v.type] = SplitPane.OneTouchExpandable.asInstanceOf[Var.Aux[Boolean, v.type]]
      def resizeWeight: Var.Aux[Double, v.type] = SplitPane.ResizeWeight.asInstanceOf[Var.Aux[Double, v.type]]

      

      def maximumDividerLocation: Int = v.getMaximumDividerLocation
      def minimumDividerLocation: Int = v.getMinimumDividerLocation
      def unwrap: javax.swing.JSplitPane = v
    }
  }

  def wrap(v: javax.swing.JSplitPane) = v.asInstanceOf[SplitPane]

  def init(v: SplitPane): Scenegraph ?=> Unit = (using sc: Scenegraph) => {
    Component.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    
    
  }
  def uninitialized(): SplitPane = {
    val res = javax.swing.JSplitPane().asInstanceOf[SplitPane]
    
    res
  }
  
  def apply(
    
    UI: Opt[Binding[javax.swing.plaf.SplitPaneUI]] = UnsetParam,
    actionMap: Opt[Binding[javax.swing.ActionMap]] = UnsetParam,
    alignmentX: Opt[Binding[Float]] = UnsetParam,
    alignmentY: Opt[Binding[Float]] = UnsetParam,
    autoscrolls: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    border: Opt[Binding[javax.swing.border.Border | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentA: Opt[Binding[Component | Null]] = UnsetParam,
    componentB: Opt[Binding[Component | Null]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    componentPopupMenu: Opt[Binding[PopupMenu | Null]] = UnsetParam,
    continuousLayout: Opt[Binding[Boolean]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    debugGraphicsOptions: Opt[Binding[Int]] = UnsetParam,
    dividerLocation: Opt[Binding[Int]] = UnsetParam,
    dividerSize: Opt[Binding[Int]] = UnsetParam,
    doubleBuffered: Opt[Binding[Boolean]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    horizontal: Opt[Binding[Boolean]] = UnsetParam,
    inheritsPopupMenu: Opt[Binding[Boolean]] = UnsetParam,
    inputVerifier: Opt[Binding[javax.swing.InputVerifier | Null]] = UnsetParam,
    lastDividerLocation: Opt[Binding[Int]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    oneTouchExpandable: Opt[Binding[Boolean]] = UnsetParam,
    opaque: Opt[Binding[Boolean]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    requestFocusEnabled: Opt[Binding[Boolean]] = UnsetParam,
    resizeWeight: Opt[Binding[Double]] = UnsetParam,
    toolTipText: Opt[Binding[String | Null]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    verifyInputWhenFocusTarget: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[SplitPane] = {
    val res = uninitialized()
    SplitPane.init(res)
    ifSet(UI, SplitPane.ops.UI(res) := _)
    ifSet(actionMap, Component.ops.actionMap(res) := _)
    ifSet(alignmentX, Component.ops.alignmentX(res) := _)
    ifSet(alignmentY, Component.ops.alignmentY(res) := _)
    ifSet(autoscrolls, Component.ops.autoscrolls(res) := _)
    ifSet(background, Node.ops.background(res) := _)
    ifSet(border, Component.ops.border(res) := _)
    ifSet(bounds, Node.ops.bounds(res) := _)
    ifSet(componentA, SplitPane.ops.componentA(res) := _)
    ifSet(componentB, SplitPane.ops.componentB(res) := _)
    ifSet(componentOrientation, Node.ops.componentOrientation(res) := _)
    ifSet(componentPopupMenu, Component.ops.componentPopupMenu(res) := _)
    ifSet(continuousLayout, SplitPane.ops.continuousLayout(res) := _)
    ifSet(cursor, Node.ops.cursor(res) := _)
    ifSet(debugGraphicsOptions, Component.ops.debugGraphicsOptions(res) := _)
    ifSet(dividerLocation, SplitPane.ops.dividerLocation(res) := _)
    ifSet(dividerSize, SplitPane.ops.dividerSize(res) := _)
    ifSet(doubleBuffered, Component.ops.doubleBuffered(res) := _)
    ifSet(enabled, Node.ops.enabled(res) := _)
    ifSet(focusable, Node.ops.focusable(res) := _)
    ifSet(font, Node.ops.font(res) := _)
    ifSet(foreground, Node.ops.foreground(res) := _)
    ifSet(horizontal, SplitPane.ops.horizontal(res) := _)
    ifSet(inheritsPopupMenu, Component.ops.inheritsPopupMenu(res) := _)
    ifSet(inputVerifier, Component.ops.inputVerifier(res) := _)
    ifSet(lastDividerLocation, SplitPane.ops.lastDividerLocation(res) := _)
    ifSet(maxSize, Node.ops.maxSize(res) := _)
    ifSet(minSize, Node.ops.minSize(res) := _)
    ifSet(mouseDragMut, Node.ops.mouseDragMut(res) := _)
    ifSet(name, Node.ops.name(res) := _)
    ifSet(oneTouchExpandable, SplitPane.ops.oneTouchExpandable(res) := _)
    ifSet(opaque, Component.ops.opaque(res) := _)
    ifSet(prefSize, Node.ops.prefSize(res) := _)
    ifSet(requestFocusEnabled, Component.ops.requestFocusEnabled(res) := _)
    ifSet(resizeWeight, SplitPane.ops.resizeWeight(res) := _)
    ifSet(toolTipText, Component.ops.toolTipText(res) := _)
    ifSet(transferHandler, Component.ops.transferHandler(res) := _)
    ifSet(verifyInputWhenFocusTarget, Component.ops.verifyInputWhenFocusTarget(res) := _)
    ifSet(visible, Node.ops.visible(res) := _)
    res
  }
  
}