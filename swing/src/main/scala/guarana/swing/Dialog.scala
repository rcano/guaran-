//AUTOGENERATED FILE, DO NOT MODIFY

package guarana.swing

import language.implicitConversions
import java.awt.{Component => _, MenuBar => _, MenuItem => _, TextComponent => _, TextField => _, _}
import java.awt.event._
import javax.swing.{Action => _, _}
import javax.swing.event._
import guarana.swing.util._
import scala.jdk.CollectionConverters._
import scala.util.chaining._

opaque type Dialog <: WindowBase = javax.swing.JDialog & WindowBase
object Dialog extends VarsMap {
  val ContentPane: SwingVar.Aux[Dialog, java.awt.Container | Null] = SwingVar[Dialog, java.awt.Container | Null]("contentPane", _.getContentPane, _.setContentPane(_))
  val DefaultCloseOperation: SwingVar.Aux[Dialog, Int] = SwingVar[Dialog, Int]("defaultCloseOperation", _.getDefaultCloseOperation, _.setDefaultCloseOperation(_))
  val GlassPane: SwingVar.Aux[Dialog, java.awt.Component | Null] = SwingVar[Dialog, java.awt.Component | Null]("glassPane", _.getGlassPane, _.setGlassPane(_))
  val LayeredPane: SwingVar.Aux[Dialog, javax.swing.JLayeredPane | Null] = SwingVar[Dialog, javax.swing.JLayeredPane | Null]("layeredPane", _.getLayeredPane, _.setLayeredPane(_))
  val MenuBar: SwingVar.Aux[Dialog, javax.swing.JMenuBar | Null] = SwingVar[Dialog, javax.swing.JMenuBar | Null]("menuBar", _.getJMenuBar, _.setJMenuBar(_))
  val Modal: SwingVar.Aux[Dialog, Boolean] = SwingVar[Dialog, Boolean]("modal", _.isModal, _.setModal(_))
  val ModalityType: SwingVar.Aux[Dialog, java.awt.Dialog.ModalityType | Null] = SwingVar[Dialog, java.awt.Dialog.ModalityType | Null]("modalityType", _.getModalityType, _.setModalityType(_))
  val Resizable: SwingVar.Aux[Dialog, Boolean] = SwingVar[Dialog, Boolean]("resizable", _.isResizable, _.setResizable(_))
  val Title: SwingVar.Aux[Dialog, java.lang.String | Null] = SwingVar[Dialog, java.lang.String | Null]("title", _.getTitle, _.setTitle(_))
  val TransferHandler: SwingVar.Aux[Dialog, javax.swing.TransferHandler | Null] = SwingVar[Dialog, javax.swing.TransferHandler | Null]("transferHandler", _.getTransferHandler, _.setTransferHandler(_))
  val Undecorated: SwingVar.Aux[Dialog, Boolean] = SwingVar[Dialog, Boolean]("undecorated", _.isUndecorated, _.setUndecorated(_))

  

  given ops as Ops.type = Ops
  object Ops {
    extension (v: Dialog) {
      def contentPane: Var.Aux[java.awt.Container | Null, v.type] = Dialog.ContentPane.asInstanceOf[Var.Aux[java.awt.Container | Null, v.type]]
      def defaultCloseOperation: Var.Aux[Int, v.type] = Dialog.DefaultCloseOperation.asInstanceOf[Var.Aux[Int, v.type]]
      def glassPane: Var.Aux[java.awt.Component | Null, v.type] = Dialog.GlassPane.asInstanceOf[Var.Aux[java.awt.Component | Null, v.type]]
      def layeredPane: Var.Aux[javax.swing.JLayeredPane | Null, v.type] = Dialog.LayeredPane.asInstanceOf[Var.Aux[javax.swing.JLayeredPane | Null, v.type]]
      def menuBar: Var.Aux[javax.swing.JMenuBar | Null, v.type] = Dialog.MenuBar.asInstanceOf[Var.Aux[javax.swing.JMenuBar | Null, v.type]]
      def modal: Var.Aux[Boolean, v.type] = Dialog.Modal.asInstanceOf[Var.Aux[Boolean, v.type]]
      def modalityType: Var.Aux[java.awt.Dialog.ModalityType | Null, v.type] = Dialog.ModalityType.asInstanceOf[Var.Aux[java.awt.Dialog.ModalityType | Null, v.type]]
      def resizable: Var.Aux[Boolean, v.type] = Dialog.Resizable.asInstanceOf[Var.Aux[Boolean, v.type]]
      def title: Var.Aux[java.lang.String | Null, v.type] = Dialog.Title.asInstanceOf[Var.Aux[java.lang.String | Null, v.type]]
      def transferHandler: Var.Aux[javax.swing.TransferHandler | Null, v.type] = Dialog.TransferHandler.asInstanceOf[Var.Aux[javax.swing.TransferHandler | Null, v.type]]
      def undecorated: Var.Aux[Boolean, v.type] = Dialog.Undecorated.asInstanceOf[Var.Aux[Boolean, v.type]]

      

      def rootPane: JRootPane = v.getRootPane.nn
      def unwrap: javax.swing.JDialog = v
    }
  }

  def wrap(v: javax.swing.JDialog) = v.asInstanceOf[Dialog]

  def init(v: Dialog): Scenegraph ?=> Unit = (using sc: Scenegraph) => {
    WindowBase.init(v)
    v.addPropertyChangeListener(varsPropertyListener(v))
    
    
  }
  def uninitialized(parent: WindowBase | Null = null, gc: GraphicsConfiguration | Null = null): Dialog = {
    val res = javax.swing.JDialog(parent.?(_.unwrap), null: String | Null, null: java.awt.Dialog.ModalityType | Null, gc).asInstanceOf[Dialog]
    
    res
  }
  
  def apply(
    parent: WindowBase | Null = null, gc: GraphicsConfiguration | Null = null,
    alwaysOnTop: Opt[Binding[Boolean]] = UnsetParam,
    autoRequestFocus: Opt[Binding[Boolean]] = UnsetParam,
    background: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    bounds: Opt[Binding[Bounds]] = UnsetParam,
    componentOrientation: Opt[Binding[java.awt.ComponentOrientation]] = UnsetParam,
    contentPane: Opt[Binding[java.awt.Container | Null]] = UnsetParam,
    cursor: Opt[Binding[java.awt.Cursor | Null]] = UnsetParam,
    defaultCloseOperation: Opt[Binding[Int]] = UnsetParam,
    enabled: Opt[Binding[Boolean]] = UnsetParam,
    focusCycleRoot: Opt[Binding[Boolean]] = UnsetParam,
    focusable: Opt[Binding[Boolean]] = UnsetParam,
    focusableWindowState: Opt[Binding[Boolean]] = UnsetParam,
    font: Opt[Binding[java.awt.Font | Null]] = UnsetParam,
    foreground: Opt[Binding[java.awt.Color | Null]] = UnsetParam,
    glassPane: Opt[Binding[java.awt.Component | Null]] = UnsetParam,
    iconImages: Opt[Binding[Seq[java.awt.Image]]] = UnsetParam,
    layeredPane: Opt[Binding[javax.swing.JLayeredPane | Null]] = UnsetParam,
    locationByPlatform: Opt[Binding[Boolean]] = UnsetParam,
    maxSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    menuBar: Opt[Binding[javax.swing.JMenuBar | Null]] = UnsetParam,
    minSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    modal: Opt[Binding[Boolean]] = UnsetParam,
    modalExclusionType: Opt[Binding[java.awt.Dialog.ModalExclusionType]] = UnsetParam,
    modalityType: Opt[Binding[java.awt.Dialog.ModalityType | Null]] = UnsetParam,
    mouseDragMut: Opt[Binding[Option[MouseDrag]]] = UnsetParam,
    name: Opt[Binding[String | Null]] = UnsetParam,
    opacity: Opt[Binding[Float]] = UnsetParam,
    prefSize: Opt[Binding[(Double, Double) | Null]] = UnsetParam,
    resizable: Opt[Binding[Boolean]] = UnsetParam,
    root: Opt[Binding[Node]] = UnsetParam,
    shape: Opt[Binding[java.awt.Shape | Null]] = UnsetParam,
    title: Opt[Binding[java.lang.String | Null]] = UnsetParam,
    tpe: Opt[Binding[java.awt.Window.Type]] = UnsetParam,
    transferHandler: Opt[Binding[javax.swing.TransferHandler | Null]] = UnsetParam,
    undecorated: Opt[Binding[Boolean]] = UnsetParam,
    visible: Opt[Binding[Boolean]] = UnsetParam
  ): Scenegraph ?=> VarContextAction[Dialog] = {
    val res = uninitialized(parent, gc)
    Dialog.init(res)
    ifSet(alwaysOnTop, WindowBase.ops.alwaysOnTop(res) := _)
    ifSet(autoRequestFocus, WindowBase.ops.autoRequestFocus(res) := _)
    ifSet(background, Node.ops.background(res) := _)
    ifSet(bounds, Node.ops.bounds(res) := _)
    ifSet(componentOrientation, Node.ops.componentOrientation(res) := _)
    ifSet(contentPane, Dialog.ops.contentPane(res) := _)
    ifSet(cursor, Node.ops.cursor(res) := _)
    ifSet(defaultCloseOperation, Dialog.ops.defaultCloseOperation(res) := _)
    ifSet(enabled, Node.ops.enabled(res) := _)
    ifSet(focusCycleRoot, WindowBase.ops.focusCycleRoot(res) := _)
    ifSet(focusable, Node.ops.focusable(res) := _)
    ifSet(focusableWindowState, WindowBase.ops.focusableWindowState(res) := _)
    ifSet(font, Node.ops.font(res) := _)
    ifSet(foreground, Node.ops.foreground(res) := _)
    ifSet(glassPane, Dialog.ops.glassPane(res) := _)
    ifSet(iconImages, WindowBase.ops.iconImages(res) := _)
    ifSet(layeredPane, Dialog.ops.layeredPane(res) := _)
    ifSet(locationByPlatform, WindowBase.ops.locationByPlatform(res) := _)
    ifSet(maxSize, Node.ops.maxSize(res) := _)
    ifSet(menuBar, Dialog.ops.menuBar(res) := _)
    ifSet(minSize, Node.ops.minSize(res) := _)
    ifSet(modal, Dialog.ops.modal(res) := _)
    ifSet(modalExclusionType, WindowBase.ops.modalExclusionType(res) := _)
    ifSet(modalityType, Dialog.ops.modalityType(res) := _)
    ifSet(mouseDragMut, Node.ops.mouseDragMut(res) := _)
    ifSet(name, Node.ops.name(res) := _)
    ifSet(opacity, WindowBase.ops.opacity(res) := _)
    ifSet(prefSize, Node.ops.prefSize(res) := _)
    ifSet(resizable, Dialog.ops.resizable(res) := _)
    ifSet(root, WindowBase.ops.root(res) := _)
    ifSet(shape, WindowBase.ops.shape(res) := _)
    ifSet(title, Dialog.ops.title(res) := _)
    ifSet(tpe, WindowBase.ops.tpe(res) := _)
    ifSet(transferHandler, Dialog.ops.transferHandler(res) := _)
    ifSet(undecorated, Dialog.ops.undecorated(res) := _)
    ifSet(visible, Node.ops.visible(res) := _)
    res
  }
  
}