package apricot.vk

import scala.language.unsafeNulls
import guarana.unn
import org.lwjgl.system.MemoryStack

object allocators:
  given Allocator[org.lwjgl.system.jni.JNINativeMethod] with
    type Buffer = org.lwjgl.system.jni.JNINativeMethod.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.jni.JNINativeMethod.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.jni.JNINativeMethod.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.jni.JNINativeMethod.calloc().unn
    inline def malloc() = org.lwjgl.system.jni.JNINativeMethod.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.jni.JNINativeMethod.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.jni.JNINativeMethod.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.jni.JNINativeMethod.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.jni.JNINativeMethod.malloc(capacity).unn
  given Allocator[org.lwjgl.system.libffi.FFICIF] with
    type Buffer = org.lwjgl.system.libffi.FFICIF.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFICIF.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFICIF.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.libffi.FFICIF.calloc().unn
    inline def malloc() = org.lwjgl.system.libffi.FFICIF.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFICIF.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFICIF.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFICIF.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFICIF.malloc(capacity).unn
  given Allocator[org.lwjgl.system.libffi.FFIClosure] with
    type Buffer = org.lwjgl.system.libffi.FFIClosure.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFIClosure.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFIClosure.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.libffi.FFIClosure.calloc().unn
    inline def malloc() = org.lwjgl.system.libffi.FFIClosure.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFIClosure.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFIClosure.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFIClosure.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFIClosure.malloc(capacity).unn
  given Allocator[org.lwjgl.system.libffi.FFIType] with
    type Buffer = org.lwjgl.system.libffi.FFIType.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFIType.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.libffi.FFIType.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.libffi.FFIType.calloc().unn
    inline def malloc() = org.lwjgl.system.libffi.FFIType.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFIType.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.libffi.FFIType.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFIType.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.libffi.FFIType.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.EpollData] with
    type Buffer = org.lwjgl.system.linux.EpollData.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.EpollData.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.EpollData.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.EpollData.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.EpollData.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.EpollData.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.EpollData.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.EpollData.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.EpollData.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.EpollEvent] with
    type Buffer = org.lwjgl.system.linux.EpollEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.EpollEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.EpollEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.EpollEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.EpollEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.EpollEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.EpollEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.EpollEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.EpollEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.FOwnerEx] with
    type Buffer = org.lwjgl.system.linux.FOwnerEx.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.FOwnerEx.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.FOwnerEx.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.FOwnerEx.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.FOwnerEx.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.FOwnerEx.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.FOwnerEx.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.FOwnerEx.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.FOwnerEx.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.Flock] with
    type Buffer = org.lwjgl.system.linux.Flock.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.Flock.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.Flock.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.Flock.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.Flock.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Flock.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Flock.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.Flock.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.Flock.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.IOVec] with
    type Buffer = org.lwjgl.system.linux.IOVec.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.IOVec.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.IOVec.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.IOVec.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.IOVec.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.IOVec.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.IOVec.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.IOVec.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.IOVec.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.KernelTimespec] with
    type Buffer = org.lwjgl.system.linux.KernelTimespec.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.KernelTimespec.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.KernelTimespec.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.KernelTimespec.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.KernelTimespec.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.KernelTimespec.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.KernelTimespec.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.KernelTimespec.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.KernelTimespec.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.Msghdr] with
    type Buffer = org.lwjgl.system.linux.Msghdr.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.Msghdr.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.Msghdr.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.Msghdr.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.Msghdr.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Msghdr.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Msghdr.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.Msghdr.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.Msghdr.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.OpenHow] with
    type Buffer = org.lwjgl.system.linux.OpenHow.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.OpenHow.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.OpenHow.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.OpenHow.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.OpenHow.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.OpenHow.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.OpenHow.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.OpenHow.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.OpenHow.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.Sockaddr] with
    type Buffer = org.lwjgl.system.linux.Sockaddr.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.Sockaddr.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.Sockaddr.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.Sockaddr.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.Sockaddr.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Sockaddr.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Sockaddr.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.Sockaddr.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.Sockaddr.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.Statx] with
    type Buffer = org.lwjgl.system.linux.Statx.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.Statx.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.Statx.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.Statx.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.Statx.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Statx.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Statx.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.Statx.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.Statx.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.StatxTimestamp] with
    type Buffer = org.lwjgl.system.linux.StatxTimestamp.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.StatxTimestamp.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.StatxTimestamp.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.StatxTimestamp.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.StatxTimestamp.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.StatxTimestamp.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.StatxTimestamp.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.StatxTimestamp.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.StatxTimestamp.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.Visual] with
    type Buffer = org.lwjgl.system.linux.Visual.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.Visual.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.Visual.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.Visual.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.Visual.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Visual.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.Visual.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.Visual.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.Visual.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XAnyEvent] with
    type Buffer = org.lwjgl.system.linux.XAnyEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XAnyEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XAnyEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XAnyEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XAnyEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XAnyEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XAnyEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XAnyEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XAnyEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XButtonEvent] with
    type Buffer = org.lwjgl.system.linux.XButtonEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XButtonEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XButtonEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XButtonEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XButtonEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XButtonEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XButtonEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XButtonEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XButtonEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XCirculateEvent] with
    type Buffer = org.lwjgl.system.linux.XCirculateEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCirculateEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCirculateEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XCirculateEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XCirculateEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCirculateEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCirculateEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XCirculateEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XCirculateEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XCirculateRequestEvent] with
    type Buffer = org.lwjgl.system.linux.XCirculateRequestEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCirculateRequestEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCirculateRequestEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XCirculateRequestEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XCirculateRequestEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCirculateRequestEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCirculateRequestEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XCirculateRequestEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XCirculateRequestEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XClientMessageEvent] with
    type Buffer = org.lwjgl.system.linux.XClientMessageEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XClientMessageEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XClientMessageEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XClientMessageEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XClientMessageEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XClientMessageEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XClientMessageEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XClientMessageEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XClientMessageEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XColormapEvent] with
    type Buffer = org.lwjgl.system.linux.XColormapEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XColormapEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XColormapEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XColormapEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XColormapEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XColormapEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XColormapEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XColormapEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XColormapEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XConfigureEvent] with
    type Buffer = org.lwjgl.system.linux.XConfigureEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XConfigureEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XConfigureEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XConfigureEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XConfigureEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XConfigureEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XConfigureEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XConfigureEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XConfigureEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XConfigureRequestEvent] with
    type Buffer = org.lwjgl.system.linux.XConfigureRequestEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XConfigureRequestEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XConfigureRequestEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XConfigureRequestEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XConfigureRequestEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XConfigureRequestEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XConfigureRequestEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XConfigureRequestEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XConfigureRequestEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XCreateWindowEvent] with
    type Buffer = org.lwjgl.system.linux.XCreateWindowEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCreateWindowEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCreateWindowEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XCreateWindowEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XCreateWindowEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCreateWindowEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCreateWindowEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XCreateWindowEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XCreateWindowEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XCrossingEvent] with
    type Buffer = org.lwjgl.system.linux.XCrossingEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCrossingEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XCrossingEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XCrossingEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XCrossingEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCrossingEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XCrossingEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XCrossingEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XCrossingEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XDestroyWindowEvent] with
    type Buffer = org.lwjgl.system.linux.XDestroyWindowEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XDestroyWindowEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XDestroyWindowEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XDestroyWindowEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XDestroyWindowEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XDestroyWindowEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XDestroyWindowEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XDestroyWindowEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XDestroyWindowEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XErrorEvent] with
    type Buffer = org.lwjgl.system.linux.XErrorEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XErrorEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XErrorEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XErrorEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XErrorEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XErrorEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XErrorEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XErrorEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XErrorEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XEvent] with
    type Buffer = org.lwjgl.system.linux.XEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XExposeEvent] with
    type Buffer = org.lwjgl.system.linux.XExposeEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XExposeEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XExposeEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XExposeEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XExposeEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XExposeEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XExposeEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XExposeEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XExposeEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XFocusChangeEvent] with
    type Buffer = org.lwjgl.system.linux.XFocusChangeEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XFocusChangeEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XFocusChangeEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XFocusChangeEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XFocusChangeEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XFocusChangeEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XFocusChangeEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XFocusChangeEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XFocusChangeEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XGenericEvent] with
    type Buffer = org.lwjgl.system.linux.XGenericEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGenericEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGenericEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XGenericEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XGenericEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGenericEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGenericEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XGenericEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XGenericEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XGenericEventCookie] with
    type Buffer = org.lwjgl.system.linux.XGenericEventCookie.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGenericEventCookie.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGenericEventCookie.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XGenericEventCookie.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XGenericEventCookie.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGenericEventCookie.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGenericEventCookie.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XGenericEventCookie.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XGenericEventCookie.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XGraphicsExposeEvent] with
    type Buffer = org.lwjgl.system.linux.XGraphicsExposeEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XGraphicsExposeEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XGraphicsExposeEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XGraphicsExposeEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XGraphicsExposeEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XGravityEvent] with
    type Buffer = org.lwjgl.system.linux.XGravityEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGravityEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XGravityEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XGravityEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XGravityEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGravityEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XGravityEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XGravityEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XGravityEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XKeyEvent] with
    type Buffer = org.lwjgl.system.linux.XKeyEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XKeyEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XKeyEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XKeyEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XKeyEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XKeyEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XKeyEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XKeyEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XKeyEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XKeymapEvent] with
    type Buffer = org.lwjgl.system.linux.XKeymapEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XKeymapEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XKeymapEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XKeymapEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XKeymapEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XKeymapEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XKeymapEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XKeymapEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XKeymapEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XMapEvent] with
    type Buffer = org.lwjgl.system.linux.XMapEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMapEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMapEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XMapEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XMapEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMapEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMapEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XMapEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XMapEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XMapRequestEvent] with
    type Buffer = org.lwjgl.system.linux.XMapRequestEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMapRequestEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMapRequestEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XMapRequestEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XMapRequestEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMapRequestEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMapRequestEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XMapRequestEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XMapRequestEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XMappingEvent] with
    type Buffer = org.lwjgl.system.linux.XMappingEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMappingEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMappingEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XMappingEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XMappingEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMappingEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMappingEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XMappingEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XMappingEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XMotionEvent] with
    type Buffer = org.lwjgl.system.linux.XMotionEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMotionEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XMotionEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XMotionEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XMotionEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMotionEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XMotionEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XMotionEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XMotionEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XNoExposeEvent] with
    type Buffer = org.lwjgl.system.linux.XNoExposeEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XNoExposeEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XNoExposeEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XNoExposeEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XNoExposeEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XNoExposeEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XNoExposeEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XNoExposeEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XNoExposeEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XPropertyEvent] with
    type Buffer = org.lwjgl.system.linux.XPropertyEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XPropertyEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XPropertyEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XPropertyEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XPropertyEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XPropertyEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XPropertyEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XPropertyEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XPropertyEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XReparentEvent] with
    type Buffer = org.lwjgl.system.linux.XReparentEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XReparentEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XReparentEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XReparentEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XReparentEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XReparentEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XReparentEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XReparentEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XReparentEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XResizeRequestEvent] with
    type Buffer = org.lwjgl.system.linux.XResizeRequestEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XResizeRequestEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XResizeRequestEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XResizeRequestEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XResizeRequestEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XResizeRequestEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XResizeRequestEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XResizeRequestEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XResizeRequestEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XSelectionClearEvent] with
    type Buffer = org.lwjgl.system.linux.XSelectionClearEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionClearEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionClearEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XSelectionClearEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XSelectionClearEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionClearEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionClearEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionClearEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionClearEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XSelectionEvent] with
    type Buffer = org.lwjgl.system.linux.XSelectionEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XSelectionEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XSelectionEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XSelectionRequestEvent] with
    type Buffer = org.lwjgl.system.linux.XSelectionRequestEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionRequestEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSelectionRequestEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XSelectionRequestEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XSelectionRequestEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionRequestEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSelectionRequestEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionRequestEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XSelectionRequestEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XSetWindowAttributes] with
    type Buffer = org.lwjgl.system.linux.XSetWindowAttributes.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSetWindowAttributes.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XSetWindowAttributes.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XSetWindowAttributes.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XSetWindowAttributes.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSetWindowAttributes.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XSetWindowAttributes.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XSetWindowAttributes.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XSetWindowAttributes.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XUnmapEvent] with
    type Buffer = org.lwjgl.system.linux.XUnmapEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XUnmapEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XUnmapEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XUnmapEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XUnmapEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XUnmapEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XUnmapEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XUnmapEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XUnmapEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XVisibilityEvent] with
    type Buffer = org.lwjgl.system.linux.XVisibilityEvent.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XVisibilityEvent.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XVisibilityEvent.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XVisibilityEvent.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XVisibilityEvent.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XVisibilityEvent.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XVisibilityEvent.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XVisibilityEvent.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XVisibilityEvent.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.XVisualInfo] with
    type Buffer = org.lwjgl.system.linux.XVisualInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.XVisualInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.XVisualInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.XVisualInfo.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.XVisualInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XVisualInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.XVisualInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.XVisualInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.XVisualInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOCQRingOffsets] with
    type Buffer = org.lwjgl.system.linux.liburing.IOCQRingOffsets.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOCQRingOffsets.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOCQRingOffsets.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOCQRingOffsets.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOSQRingOffsets] with
    type Buffer = org.lwjgl.system.linux.liburing.IOSQRingOffsets.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOSQRingOffsets.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOSQRingOffsets.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOSQRingOffsets.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURing] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURing.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURing.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURing.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURing.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURing.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURing.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURing.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURing.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURing.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingCQ] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingCQ.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingCQ.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingCQ.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingCQ.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingCQ.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQ.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQ.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQ.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQ.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingCQE] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingCQE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingCQE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingCQE.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingCQE.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingCQE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingCQE.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingGeteventsArg] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingGeteventsArg.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingParams] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingParams.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingParams.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingParams.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingParams.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingParams.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingParams.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingParams.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingParams.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingParams.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingProbe] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingProbe.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingProbe.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingProbe.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingProbe.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingProbe.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbe.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbe.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbe.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbe.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingProbeOp] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingProbeOp.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingProbeOp.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingProbeOp.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingProbeOp.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingProbeOp.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbeOp.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbeOp.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbeOp.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingProbeOp.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingRSRCRegister] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCRegister.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingRSRCUpdate] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRSRCUpdate2.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingRestriction] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingRestriction.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRestriction.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingRestriction.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingRestriction.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingRestriction.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRestriction.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRestriction.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRestriction.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingRestriction.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingSQ] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingSQ.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingSQ.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingSQ.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingSQ.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingSQ.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQ.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQ.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQ.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQ.malloc(capacity).unn
  given Allocator[org.lwjgl.system.linux.liburing.IOURingSQE] with
    type Buffer = org.lwjgl.system.linux.liburing.IOURingSQE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingSQE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.linux.liburing.IOURingSQE.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.linux.liburing.IOURingSQE.calloc().unn
    inline def malloc() = org.lwjgl.system.linux.liburing.IOURingSQE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.linux.liburing.IOURingSQE.malloc(capacity).unn
  given Allocator[org.lwjgl.system.macosx.CGEventTapInformation] with
    type Buffer = org.lwjgl.system.macosx.CGEventTapInformation.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.macosx.CGEventTapInformation.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.macosx.CGEventTapInformation.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.macosx.CGEventTapInformation.calloc().unn
    inline def malloc() = org.lwjgl.system.macosx.CGEventTapInformation.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.CGEventTapInformation.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.CGEventTapInformation.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.macosx.CGEventTapInformation.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.macosx.CGEventTapInformation.malloc(capacity).unn
  given Allocator[org.lwjgl.system.macosx.CGPoint] with
    type Buffer = org.lwjgl.system.macosx.CGPoint.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.macosx.CGPoint.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.macosx.CGPoint.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.macosx.CGPoint.calloc().unn
    inline def malloc() = org.lwjgl.system.macosx.CGPoint.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.CGPoint.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.CGPoint.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.macosx.CGPoint.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.macosx.CGPoint.malloc(capacity).unn
  given Allocator[org.lwjgl.system.macosx.ObjCMethodDescription] with
    type Buffer = org.lwjgl.system.macosx.ObjCMethodDescription.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.macosx.ObjCMethodDescription.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.macosx.ObjCMethodDescription.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.macosx.ObjCMethodDescription.calloc().unn
    inline def malloc() = org.lwjgl.system.macosx.ObjCMethodDescription.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.ObjCMethodDescription.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.ObjCMethodDescription.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.macosx.ObjCMethodDescription.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.macosx.ObjCMethodDescription.malloc(capacity).unn
  given Allocator[org.lwjgl.system.macosx.ObjCPropertyAttribute] with
    type Buffer = org.lwjgl.system.macosx.ObjCPropertyAttribute.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.macosx.ObjCPropertyAttribute.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.macosx.ObjCPropertyAttribute.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.macosx.ObjCPropertyAttribute.calloc().unn
    inline def malloc() = org.lwjgl.system.macosx.ObjCPropertyAttribute.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.ObjCPropertyAttribute.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.macosx.ObjCPropertyAttribute.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.macosx.ObjCPropertyAttribute.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.macosx.ObjCPropertyAttribute.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.DEVMODE] with
    type Buffer = org.lwjgl.system.windows.DEVMODE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.DEVMODE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.DEVMODE.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.DEVMODE.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.DEVMODE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.DEVMODE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.DEVMODE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.DEVMODE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.DEVMODE.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.DISPLAY_DEVICE] with
    type Buffer = org.lwjgl.system.windows.DISPLAY_DEVICE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.DISPLAY_DEVICE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.DISPLAY_DEVICE.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.DISPLAY_DEVICE.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.DISPLAY_DEVICE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.DISPLAY_DEVICE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.DISPLAY_DEVICE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.DISPLAY_DEVICE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.DISPLAY_DEVICE.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.HARDWAREINPUT] with
    type Buffer = org.lwjgl.system.windows.HARDWAREINPUT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.HARDWAREINPUT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.HARDWAREINPUT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.HARDWAREINPUT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.HARDWAREINPUT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.HARDWAREINPUT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.HARDWAREINPUT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.HARDWAREINPUT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.HARDWAREINPUT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.INPUT] with
    type Buffer = org.lwjgl.system.windows.INPUT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.INPUT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.INPUT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.INPUT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.INPUT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.INPUT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.INPUT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.INPUT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.INPUT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.KEYBDINPUT] with
    type Buffer = org.lwjgl.system.windows.KEYBDINPUT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.KEYBDINPUT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.KEYBDINPUT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.KEYBDINPUT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.KEYBDINPUT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.KEYBDINPUT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.KEYBDINPUT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.KEYBDINPUT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.KEYBDINPUT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.LARGE_INTEGER] with
    type Buffer = org.lwjgl.system.windows.LARGE_INTEGER.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.LARGE_INTEGER.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.LARGE_INTEGER.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.LARGE_INTEGER.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.LARGE_INTEGER.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.LARGE_INTEGER.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.LARGE_INTEGER.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.LARGE_INTEGER.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.LARGE_INTEGER.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.MONITORINFOEX] with
    type Buffer = org.lwjgl.system.windows.MONITORINFOEX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.MONITORINFOEX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.MONITORINFOEX.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.MONITORINFOEX.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.MONITORINFOEX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MONITORINFOEX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MONITORINFOEX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.MONITORINFOEX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.MONITORINFOEX.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.MOUSEINPUT] with
    type Buffer = org.lwjgl.system.windows.MOUSEINPUT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.MOUSEINPUT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.MOUSEINPUT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.MOUSEINPUT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.MOUSEINPUT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MOUSEINPUT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MOUSEINPUT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.MOUSEINPUT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.MOUSEINPUT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.MSG] with
    type Buffer = org.lwjgl.system.windows.MSG.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.MSG.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.MSG.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.MSG.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.MSG.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MSG.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.MSG.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.MSG.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.MSG.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR] with
    type Buffer = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.PIXELFORMATDESCRIPTOR.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.POINT] with
    type Buffer = org.lwjgl.system.windows.POINT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.POINT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.POINT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.POINT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.POINT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.POINT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.POINT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.POINT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.POINT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.POINTL] with
    type Buffer = org.lwjgl.system.windows.POINTL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.POINTL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.POINTL.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.POINTL.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.POINTL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.POINTL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.POINTL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.POINTL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.POINTL.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.RECT] with
    type Buffer = org.lwjgl.system.windows.RECT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.RECT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.RECT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.RECT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.RECT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.RECT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.RECT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.RECT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.RECT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.SECURITY_ATTRIBUTES] with
    type Buffer = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.SECURITY_ATTRIBUTES.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.TOUCHINPUT] with
    type Buffer = org.lwjgl.system.windows.TOUCHINPUT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.TOUCHINPUT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.TOUCHINPUT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.TOUCHINPUT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.TOUCHINPUT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.TOUCHINPUT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.TOUCHINPUT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.TOUCHINPUT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.TOUCHINPUT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.WINDOWPLACEMENT] with
    type Buffer = org.lwjgl.system.windows.WINDOWPLACEMENT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.WINDOWPLACEMENT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.WINDOWPLACEMENT.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.WINDOWPLACEMENT.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.WINDOWPLACEMENT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.WINDOWPLACEMENT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.WINDOWPLACEMENT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.WINDOWPLACEMENT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.WINDOWPLACEMENT.malloc(capacity).unn
  given Allocator[org.lwjgl.system.windows.WNDCLASSEX] with
    type Buffer = org.lwjgl.system.windows.WNDCLASSEX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.system.windows.WNDCLASSEX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.system.windows.WNDCLASSEX.malloc(stack).unn
    inline def calloc() = org.lwjgl.system.windows.WNDCLASSEX.calloc().unn
    inline def malloc() = org.lwjgl.system.windows.WNDCLASSEX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.WNDCLASSEX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.system.windows.WNDCLASSEX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.system.windows.WNDCLASSEX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.system.windows.WNDCLASSEX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAabbPositionsKHR] with
    type Buffer = org.lwjgl.vulkan.VkAabbPositionsKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAabbPositionsKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAabbPositionsKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAabbPositionsKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAabbPositionsKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAabbPositionsNV] with
    type Buffer = org.lwjgl.vulkan.VkAabbPositionsNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAabbPositionsNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAabbPositionsNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAabbPositionsNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAabbPositionsNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAabbPositionsNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildGeometryInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildRangeInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureBuildSizesInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureDeviceAddressInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryAabbsDataKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryDataKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryInstancesDataKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryMotionTrianglesDataNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureGeometryTrianglesDataKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureInstanceNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureInstanceNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMatrixMotionInstanceNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMemoryRequirementsInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceDataNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureMotionInstanceNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureSRTMotionInstanceNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAccelerationStructureVersionInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAcquireNextImageInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAcquireNextImageInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAcquireProfilingLockInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAllocationCallbacks] with
    type Buffer = org.lwjgl.vulkan.VkAllocationCallbacks.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAllocationCallbacks.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAllocationCallbacks.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAllocationCallbacks.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAllocationCallbacks.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAllocationCallbacks.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAllocationCallbacks.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAllocationCallbacks.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAllocationCallbacks.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkApplicationInfo] with
    type Buffer = org.lwjgl.vulkan.VkApplicationInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkApplicationInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkApplicationInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkApplicationInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkApplicationInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkApplicationInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkApplicationInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkApplicationInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkApplicationInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentDescription] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentDescription.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentDescription.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentDescription.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentDescription2] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentDescription2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentDescription2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentDescription2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentDescription2KHR] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentDescription2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentDescription2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentDescription2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescription2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayout.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentDescriptionStencilLayoutKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentReference] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentReference.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentReference.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentReference.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentReference2] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentReference2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentReference2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentReference2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentReference2KHR] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentReference2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReference2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentReference2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentReference2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReference2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayout.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentReferenceStencilLayoutKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleCountInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT] with
    type Buffer = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkAttachmentSampleLocationsEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBaseInStructure] with
    type Buffer = org.lwjgl.vulkan.VkBaseInStructure.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBaseInStructure.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBaseInStructure.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBaseInStructure.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBaseInStructure.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBaseInStructure.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBaseInStructure.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBaseInStructure.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBaseInStructure.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBaseOutStructure] with
    type Buffer = org.lwjgl.vulkan.VkBaseOutStructure.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBaseOutStructure.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBaseOutStructure.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBaseOutStructure.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBaseOutStructure.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBaseOutStructure.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBaseOutStructure.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBaseOutStructure.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBaseOutStructure.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindAccelerationStructureMemoryInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryDeviceGroupInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindBufferMemoryInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindBufferMemoryInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindBufferMemoryInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindBufferMemoryInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindBufferMemoryInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryDeviceGroupInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImageMemoryInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindImageMemoryInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImageMemoryInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImageMemoryInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImageMemoryInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemoryInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImageMemorySwapchainInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindImagePlaneMemoryInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV] with
    type Buffer = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindIndexBufferIndirectCommandNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV] with
    type Buffer = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindShaderGroupIndirectCommandNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindSparseInfo] with
    type Buffer = org.lwjgl.vulkan.VkBindSparseInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindSparseInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindSparseInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindSparseInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindSparseInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindSparseInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindSparseInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindSparseInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindSparseInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV] with
    type Buffer = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBindVertexBufferIndirectCommandNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBlitImageInfo2] with
    type Buffer = org.lwjgl.vulkan.VkBlitImageInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBlitImageInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBlitImageInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBlitImageInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBlitImageInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBlitImageInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkBlitImageInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBlitImageInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBlitImageInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBlitImageInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferCopy] with
    type Buffer = org.lwjgl.vulkan.VkBufferCopy.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferCopy.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferCopy.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferCopy2] with
    type Buffer = org.lwjgl.vulkan.VkBufferCopy2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferCopy2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferCopy2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferCopy2KHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferCopy2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCopy2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferCopy2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferCopy2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCopy2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkBufferCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferDeviceAddressInfo] with
    type Buffer = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferDeviceAddressInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferImageCopy] with
    type Buffer = org.lwjgl.vulkan.VkBufferImageCopy.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferImageCopy.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferImageCopy.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferImageCopy2] with
    type Buffer = org.lwjgl.vulkan.VkBufferImageCopy2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferImageCopy2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferImageCopy2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferImageCopy2KHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferImageCopy2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferImageCopy2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferImageCopy2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferImageCopy2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferMemoryBarrier] with
    type Buffer = org.lwjgl.vulkan.VkBufferMemoryBarrier.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferMemoryBarrier2] with
    type Buffer = org.lwjgl.vulkan.VkBufferMemoryBarrier2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryBarrier2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2] with
    type Buffer = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferMemoryRequirementsInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferOpaqueCaptureAddressCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkBufferViewCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkBufferViewCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferViewCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkBufferViewCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkBufferViewCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkBufferViewCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferViewCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkBufferViewCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferViewCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkBufferViewCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCalibratedTimestampInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCheckpointData2NV] with
    type Buffer = org.lwjgl.vulkan.VkCheckpointData2NV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCheckpointData2NV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCheckpointData2NV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCheckpointData2NV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCheckpointData2NV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCheckpointData2NV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCheckpointData2NV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCheckpointData2NV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCheckpointData2NV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCheckpointDataNV] with
    type Buffer = org.lwjgl.vulkan.VkCheckpointDataNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCheckpointDataNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCheckpointDataNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCheckpointDataNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCheckpointDataNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCheckpointDataNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCheckpointDataNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCheckpointDataNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCheckpointDataNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkClearAttachment] with
    type Buffer = org.lwjgl.vulkan.VkClearAttachment.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearAttachment.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearAttachment.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkClearAttachment.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkClearAttachment.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearAttachment.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearAttachment.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearAttachment.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearAttachment.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkClearColorValue] with
    type Buffer = org.lwjgl.vulkan.VkClearColorValue.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearColorValue.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearColorValue.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkClearColorValue.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkClearColorValue.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearColorValue.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearColorValue.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearColorValue.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearColorValue.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkClearDepthStencilValue] with
    type Buffer = org.lwjgl.vulkan.VkClearDepthStencilValue.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearDepthStencilValue.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearDepthStencilValue.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkClearDepthStencilValue.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkClearDepthStencilValue.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearDepthStencilValue.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearDepthStencilValue.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearDepthStencilValue.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearDepthStencilValue.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkClearRect] with
    type Buffer = org.lwjgl.vulkan.VkClearRect.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearRect.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearRect.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkClearRect.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkClearRect.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearRect.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearRect.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearRect.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearRect.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkClearValue] with
    type Buffer = org.lwjgl.vulkan.VkClearValue.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearValue.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkClearValue.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkClearValue.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkClearValue.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearValue.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkClearValue.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearValue.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkClearValue.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCoarseSampleLocationNV] with
    type Buffer = org.lwjgl.vulkan.VkCoarseSampleLocationNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCoarseSampleLocationNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCoarseSampleLocationNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleLocationNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV] with
    type Buffer = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCoarseSampleOrderCustomNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceConditionalRenderingInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderPassTransformInfoQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceRenderingInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferInheritanceViewportScissorInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandBufferSubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCommandPoolCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkCommandPoolCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCommandPoolCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCommandPoolCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCommandPoolCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkComponentMapping] with
    type Buffer = org.lwjgl.vulkan.VkComponentMapping.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkComponentMapping.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkComponentMapping.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkComponentMapping.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkComponentMapping.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkComponentMapping.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkComponentMapping.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkComponentMapping.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkComponentMapping.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkComputePipelineCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkComputePipelineCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkComputePipelineCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkComputePipelineCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkComputePipelineCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConditionalRenderingBeginInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkConformanceVersion] with
    type Buffer = org.lwjgl.vulkan.VkConformanceVersion.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConformanceVersion.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConformanceVersion.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkConformanceVersion.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkConformanceVersion.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConformanceVersion.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConformanceVersion.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConformanceVersion.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConformanceVersion.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkConformanceVersionKHR] with
    type Buffer = org.lwjgl.vulkan.VkConformanceVersionKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConformanceVersionKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkConformanceVersionKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkConformanceVersionKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkConformanceVersionKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConformanceVersionKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkConformanceVersionKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConformanceVersionKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkConformanceVersionKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCooperativeMatrixPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyAccelerationStructureToMemoryInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyBufferInfo2] with
    type Buffer = org.lwjgl.vulkan.VkCopyBufferInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyBufferInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyBufferInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyBufferInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyBufferToImageInfo2] with
    type Buffer = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyBufferToImageInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM] with
    type Buffer = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyCommandTransformInfoQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyDescriptorSet] with
    type Buffer = org.lwjgl.vulkan.VkCopyDescriptorSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyDescriptorSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyDescriptorSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyDescriptorSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyDescriptorSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyDescriptorSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyDescriptorSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyDescriptorSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyDescriptorSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyImageInfo2] with
    type Buffer = org.lwjgl.vulkan.VkCopyImageInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyImageInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyImageInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyImageInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyImageInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyImageInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyImageInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyImageToBufferInfo2] with
    type Buffer = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyImageToBufferInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCopyMemoryToAccelerationStructureInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX] with
    type Buffer = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuFunctionCreateInfoNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCuLaunchInfoNVX] with
    type Buffer = org.lwjgl.vulkan.VkCuLaunchInfoNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCuLaunchInfoNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCuLaunchInfoNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuLaunchInfoNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkCuModuleCreateInfoNVX] with
    type Buffer = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkCuModuleCreateInfoNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkD3D12FenceSubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerMarkerInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectNameInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugMarkerObjectTagInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugReportCallbackCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugUtilsLabelEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsLabelEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCallbackDataEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsMessengerCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectNameInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDebugUtilsObjectTagInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationBufferCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationImageCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDedicatedAllocationMemoryAllocateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDependencyInfo] with
    type Buffer = org.lwjgl.vulkan.VkDependencyInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDependencyInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDependencyInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDependencyInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDependencyInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDependencyInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDependencyInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDependencyInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDependencyInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDependencyInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDependencyInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDependencyInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDependencyInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDependencyInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDependencyInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDependencyInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDependencyInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDependencyInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDependencyInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorBufferInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorBufferInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorBufferInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorBufferInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorBufferInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorBufferInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorBufferInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorBufferInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorBufferInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorBufferInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorImageInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorImageInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorImageInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorImageInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorImageInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorImageInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorImageInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorImageInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorImageInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorImageInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorPoolCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolInlineUniformBlockCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorPoolSize] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorPoolSize.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolSize.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorPoolSize.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorPoolSize.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorPoolSize.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolSize.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolSize.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolSize.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorPoolSize.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutBinding] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBinding.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutBindingFlagsCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutSupport] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupport.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetLayoutSupportKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountAllocateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupport.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorSetVariableDescriptorCountLayoutSupportEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntry.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR] with
    type Buffer = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDescriptorUpdateTemplateEntryKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements] with
    type Buffer = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirements.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceBufferMemoryRequirementsKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceDeviceMemoryReportCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceDiagnosticsConfigCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceEventInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDeviceEventInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceEventInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceEventInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceEventInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupBindSparseInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupCommandBufferBeginInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupDeviceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupPresentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupRenderPassBeginInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceGroupSwapchainCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceImageMemoryRequirements] with
    type Buffer = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirements.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceImageMemoryRequirementsKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOpaqueCaptureAddressInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD] with
    type Buffer = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryOverallocationCreateInfoAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT] with
    type Buffer = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceMemoryReportCallbackDataEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressConstKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceOrHostAddressKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceOrHostAddressKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDevicePrivateDataCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceQueueCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueGlobalPriorityCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDeviceQueueInfo2] with
    type Buffer = org.lwjgl.vulkan.VkDeviceQueueInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDeviceQueueInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDeviceQueueInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDeviceQueueInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDeviceQueueInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDispatchIndirectCommand] with
    type Buffer = org.lwjgl.vulkan.VkDispatchIndirectCommand.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDispatchIndirectCommand.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDispatchIndirectCommand.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDispatchIndirectCommand.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDispatchIndirectCommand.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDispatchIndirectCommand.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDispatchIndirectCommand.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDispatchIndirectCommand.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDispatchIndirectCommand.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayEventInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDisplayEventInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayEventInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayEventInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayEventInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayModeParametersKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayModeParametersKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayModeParametersKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayModeParametersKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeParametersKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayModeProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModeProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayModePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayModePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD] with
    type Buffer = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayNativeHdrSurfaceCapabilitiesAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilities2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlaneProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPlanePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPowerInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPowerInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPresentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPresentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplayPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplayPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplayPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplayPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplayPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDisplaySurfaceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDrawIndexedIndirectCommand] with
    type Buffer = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawIndexedIndirectCommand.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDrawIndirectCommand] with
    type Buffer = org.lwjgl.vulkan.VkDrawIndirectCommand.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawIndirectCommand.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawIndirectCommand.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDrawIndirectCommand.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDrawIndirectCommand.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawIndirectCommand.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawIndirectCommand.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawIndirectCommand.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawIndirectCommand.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV] with
    type Buffer = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrawMeshTasksIndirectCommandNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT] with
    type Buffer = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesList2EXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT] with
    type Buffer = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkDrmFormatModifierPropertiesListEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkEventCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkEventCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkEventCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkEventCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkEventCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkEventCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkEventCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkEventCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkEventCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkEventCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportFenceCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkExportFenceCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportFenceCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportFenceCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportFenceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportFenceWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportMemoryAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryAllocateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportMemoryWin32HandleInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportSemaphoreCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExportSemaphoreWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExtensionProperties] with
    type Buffer = org.lwjgl.vulkan.VkExtensionProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtensionProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtensionProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExtensionProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExtensionProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtensionProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtensionProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtensionProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtensionProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExtent2D] with
    type Buffer = org.lwjgl.vulkan.VkExtent2D.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtent2D.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtent2D.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExtent2D.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExtent2D.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtent2D.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtent2D.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtent2D.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtent2D.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExtent3D] with
    type Buffer = org.lwjgl.vulkan.VkExtent3D.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtent3D.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExtent3D.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExtent3D.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExtent3D.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtent3D.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExtent3D.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtent3D.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExtent3D.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalBufferProperties] with
    type Buffer = org.lwjgl.vulkan.VkExternalBufferProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalBufferProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalBufferProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalBufferProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalBufferProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalBufferProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalBufferProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalBufferProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalBufferProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalBufferPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalBufferPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalFenceProperties] with
    type Buffer = org.lwjgl.vulkan.VkExternalFenceProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalFenceProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalFenceProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalFenceProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalFenceProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalFenceProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalFenceProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalFenceProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalFenceProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalFencePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalFencePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalImageFormatProperties] with
    type Buffer = org.lwjgl.vulkan.VkExternalImageFormatProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalImageFormatProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalImageFormatProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalImageFormatPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryBufferCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalMemoryImageCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalSemaphoreProperties] with
    type Buffer = org.lwjgl.vulkan.VkExternalSemaphoreProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalSemaphoreProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalSemaphoreProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphoreProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkExternalSemaphorePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFenceCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkFenceCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFenceCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFenceCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFenceGetFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceGetFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFenceGetWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFilterCubicImageViewImageFormatPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFormatProperties] with
    type Buffer = org.lwjgl.vulkan.VkFormatProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFormatProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFormatProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFormatProperties2] with
    type Buffer = org.lwjgl.vulkan.VkFormatProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFormatProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFormatProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFormatProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkFormatProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFormatProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFormatProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFormatProperties3] with
    type Buffer = org.lwjgl.vulkan.VkFormatProperties3.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties3.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties3.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFormatProperties3.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFormatProperties3.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFormatProperties3KHR] with
    type Buffer = org.lwjgl.vulkan.VkFormatProperties3KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties3KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFormatProperties3KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFormatProperties3KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFormatProperties3KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFormatProperties3KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFragmentShadingRateAttachmentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentImageInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferAttachmentsCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV] with
    type Buffer = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkFramebufferMixedSamplesCombinationNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeneratedCommandsInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeneratedCommandsMemoryRequirementsInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeometryAABBNV] with
    type Buffer = org.lwjgl.vulkan.VkGeometryAABBNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryAABBNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryAABBNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeometryAABBNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeometryAABBNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryAABBNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryAABBNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryAABBNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryAABBNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeometryDataNV] with
    type Buffer = org.lwjgl.vulkan.VkGeometryDataNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryDataNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryDataNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeometryDataNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeometryDataNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryDataNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryDataNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryDataNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryDataNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeometryNV] with
    type Buffer = org.lwjgl.vulkan.VkGeometryNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeometryNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeometryNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGeometryTrianglesNV] with
    type Buffer = org.lwjgl.vulkan.VkGeometryTrianglesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryTrianglesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGeometryTrianglesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGeometryTrianglesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGeometryTrianglesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryTrianglesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGeometryTrianglesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryTrianglesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGeometryTrianglesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsPipelineShaderGroupsCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkGraphicsShaderGroupCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkHdrMetadataEXT] with
    type Buffer = org.lwjgl.vulkan.VkHdrMetadataEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkHdrMetadataEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkHdrMetadataEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkHdrMetadataEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkHdrMetadataEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkHdrMetadataEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkHdrMetadataEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkHdrMetadataEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkHdrMetadataEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkHeadlessSurfaceCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageBlit] with
    type Buffer = org.lwjgl.vulkan.VkImageBlit.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageBlit.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageBlit.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageBlit2] with
    type Buffer = org.lwjgl.vulkan.VkImageBlit2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageBlit2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageBlit2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageBlit2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageBlit2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageBlit2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageBlit2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageBlit2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageBlit2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageBlit2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageCopy] with
    type Buffer = org.lwjgl.vulkan.VkImageCopy.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageCopy.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageCopy.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageCopy2] with
    type Buffer = org.lwjgl.vulkan.VkImageCopy2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageCopy2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageCopy2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageCopy2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageCopy2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCopy2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageCopy2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageCopy2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCopy2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCopy2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkImageCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierExplicitCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierListCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageDrmFormatModifierPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageFormatListCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkImageFormatListCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageFormatListCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageFormatListCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatListCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageFormatProperties] with
    type Buffer = org.lwjgl.vulkan.VkImageFormatProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageFormatProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageFormatProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageFormatProperties2] with
    type Buffer = org.lwjgl.vulkan.VkImageFormatProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageFormatProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageFormatProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageFormatProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageFormatProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageFormatProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageFormatProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageFormatProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageMemoryBarrier] with
    type Buffer = org.lwjgl.vulkan.VkImageMemoryBarrier.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageMemoryBarrier.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageMemoryBarrier.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageMemoryBarrier2] with
    type Buffer = org.lwjgl.vulkan.VkImageMemoryBarrier2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageMemoryBarrier2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageMemoryBarrier2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageMemoryBarrier2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryBarrier2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2] with
    type Buffer = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageMemoryRequirementsInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo] with
    type Buffer = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImagePlaneMemoryRequirementsInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageResolve] with
    type Buffer = org.lwjgl.vulkan.VkImageResolve.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageResolve.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageResolve.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageResolve2] with
    type Buffer = org.lwjgl.vulkan.VkImageResolve2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageResolve2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageResolve2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageResolve2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageResolve2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageResolve2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageResolve2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageResolve2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageResolve2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageResolve2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2] with
    type Buffer = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSparseMemoryRequirementsInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageStencilUsageCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageStencilUsageCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSubresource] with
    type Buffer = org.lwjgl.vulkan.VkImageSubresource.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresource.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresource.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSubresource.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSubresource.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresource.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresource.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresource.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresource.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSubresourceLayers] with
    type Buffer = org.lwjgl.vulkan.VkImageSubresourceLayers.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresourceLayers.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresourceLayers.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSubresourceLayers.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSubresourceLayers.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceLayers.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceLayers.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceLayers.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceLayers.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSubresourceRange] with
    type Buffer = org.lwjgl.vulkan.VkImageSubresourceRange.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresourceRange.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSubresourceRange.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSubresourceRange.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSubresourceRange.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceRange.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceRange.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceRange.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSubresourceRange.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageSwapchainCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewASTCDecodeModeEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX] with
    type Buffer = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewAddressPropertiesNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkImageViewCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewHandleInfoNVX] with
    type Buffer = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewHandleInfoNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewMinLodCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewUsageCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImageViewUsageCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportFenceFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportFenceFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportFenceWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportMemoryFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryHostPointerInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportMemoryWin32HandleInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkImportSemaphoreWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV] with
    type Buffer = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsLayoutTokenNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkIndirectCommandsStreamNV] with
    type Buffer = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkIndirectCommandsStreamNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInitializePerformanceApiInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkInputAttachmentAspectReference] with
    type Buffer = org.lwjgl.vulkan.VkInputAttachmentAspectReference.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkInputAttachmentAspectReference.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkInputAttachmentAspectReference.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReference.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR] with
    type Buffer = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInputAttachmentAspectReferenceKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkInstanceCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkInstanceCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInstanceCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkInstanceCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkInstanceCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkInstanceCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInstanceCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkInstanceCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInstanceCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkInstanceCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkLayerProperties] with
    type Buffer = org.lwjgl.vulkan.VkLayerProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkLayerProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkLayerProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkLayerProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkLayerProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkLayerProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkLayerProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkLayerProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkLayerProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK] with
    type Buffer = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMacOSSurfaceCreateInfoMVK.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMappedMemoryRange] with
    type Buffer = org.lwjgl.vulkan.VkMappedMemoryRange.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMappedMemoryRange.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMappedMemoryRange.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMappedMemoryRange.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMappedMemoryRange.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMappedMemoryRange.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMappedMemoryRange.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMappedMemoryRange.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMappedMemoryRange.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo] with
    type Buffer = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateFlagsInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkMemoryAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryBarrier] with
    type Buffer = org.lwjgl.vulkan.VkMemoryBarrier.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryBarrier.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryBarrier.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryBarrier2] with
    type Buffer = org.lwjgl.vulkan.VkMemoryBarrier2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryBarrier2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryBarrier2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryBarrier2KHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryBarrier2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryBarrier2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryBarrier2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryBarrier2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedAllocateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryDedicatedRequirements] with
    type Buffer = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirements.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryDedicatedRequirementsKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryFdPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryFdPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryGetFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetRemoteAddressInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryGetWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryHostPointerPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo] with
    type Buffer = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryOpaqueCaptureAddressAllocateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryPriorityAllocateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryRequirements] with
    type Buffer = org.lwjgl.vulkan.VkMemoryRequirements.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryRequirements.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryRequirements.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryRequirements2] with
    type Buffer = org.lwjgl.vulkan.VkMemoryRequirements2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryRequirements2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryRequirements2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryRequirements2KHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryRequirements2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryRequirements2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryRequirements2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryRequirements2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMemoryWin32HandlePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMetalSurfaceCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiDrawIndexedInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMultiDrawInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkMultiDrawInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMultiDrawInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMultiDrawInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiDrawInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMultisamplePropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultisamplePropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX] with
    type Buffer = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMultiviewPerViewAttributesInfoNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE] with
    type Buffer = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeCreateInfoVALVE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE] with
    type Buffer = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkMutableDescriptorTypeListVALVE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkOffset2D] with
    type Buffer = org.lwjgl.vulkan.VkOffset2D.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkOffset2D.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkOffset2D.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkOffset2D.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkOffset2D.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkOffset2D.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkOffset2D.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkOffset2D.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkOffset2D.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkOffset3D] with
    type Buffer = org.lwjgl.vulkan.VkOffset3D.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkOffset3D.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkOffset3D.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkOffset3D.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkOffset3D.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkOffset3D.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkOffset3D.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkOffset3D.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkOffset3D.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE] with
    type Buffer = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPastPresentationTimingGOOGLE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceConfigurationAcquireInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterDescriptionKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceCounterKHR] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceCounterKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceCounterKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceCounterKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceCounterResultKHR] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceCounterResultKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceMarkerInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceOverrideInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceQuerySubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceStreamMarkerInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceValueDataINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueDataINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPerformanceValueINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPerformanceValueINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceValueINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPerformanceValueINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPerformanceValueINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPerformanceValueINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPerformanceValueINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice16BitStorageFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice4444FormatsFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevice8BitStorageFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceASTCDecodeFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructureFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceAccelerationStructurePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBorderColorSwizzleFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferAddressFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceBufferDeviceAddressFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoherentMemoryFeaturesAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceColorWriteEnableFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceComputeShaderDerivativesFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConditionalRenderingFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceConservativeRasterizationPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCooperativeMatrixPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCornerSampledImageFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCoverageReductionModeFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceCustomBorderColorPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipControlFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthClipEnableFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolveProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDepthStencilResolvePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDescriptorIndexingPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDeviceMemoryReportFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiagnosticsConfigFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDiscardRectanglePropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDriverPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDrmPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceDynamicRenderingFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExclusiveScissorFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicState2FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExtendedDynamicStateFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalBufferInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalFenceInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalImageFormatInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryHostPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalMemoryRDMAFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceExternalSemaphoreInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFeatures2] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFeatures2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloat16Int8FeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFloatControlsPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMap2PropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentDensityMapPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRateKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceFragmentShadingRatePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceGroupPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceHostQueryResetFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceIDProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIDPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageDrmFormatModifierInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageFormatInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageRobustnessFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewImageFormatInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImageViewMinLodFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceImagelessFramebufferFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceIndexTypeUint8FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInheritedViewportScissorFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInlineUniformBlockPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceInvocationMaskFeaturesHUAWEI.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLineRasterizationPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceLinearColorAttachmentFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3Properties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance3PropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4FeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4Properties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMaintenance4PropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryBudgetPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryPriorityFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMemoryProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMeshShaderPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiDrawPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMultiviewPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePCIBusInfoPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePerformanceQueryPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePointClippingPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePortabilitySubsetPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentIdFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePresentWaitFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePrivateDataFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProperties2] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProtectedMemoryProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceProvokingVertexPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDevicePushDescriptorPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayQueryFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingMotionBlurFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelineFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPipelinePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRayTracingPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceRobustness2PropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSampleLocationsPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceScalarBlockLayoutFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicFloatFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderAtomicInt64FeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderClockFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCoreProperties2AMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderCorePropertiesAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParameterFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderDrawParametersFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderFloat16Int8FeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderImageFootprintFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSMBuiltinsPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImageFeaturesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceShadingRateImagePropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSparseImageFormatInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubgroupSizeControlPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingFeaturesHUAWEI.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSubpassShadingPropertiesHUAWEI.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSurfaceInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceSynchronization2FeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphoreProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTimelineSemaphorePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceToolProperties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceToolPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceTransformFeedbackPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointerFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVariablePointersFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVideoFormatInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan11Properties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan12Properties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Features.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkan13Properties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceVulkanMemoryModelFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceYcbcrImageArraysFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCacheCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCacheHeaderVersionOne.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAdvancedStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState] with
    type Buffer = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendAttachmentState.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorBlendStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineColorWriteCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCompilerControlCreateInfoAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageModulationStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageReductionStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCoverageToColorStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineCreationFeedbackEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDepthStencilStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDiscardRectangleStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineDynamicStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineExecutableInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableInternalRepresentationKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutablePropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineExecutableStatisticKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateEnumStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineFragmentShadingRateStateCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineInputAssemblyStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineLayoutCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineLayoutCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineLibraryCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineMultisampleStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationConservativeStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationDepthClipStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationLineStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationProvokingVertexStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateRasterizationOrderAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRasterizationStateStreamCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRenderingCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRenderingCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineRepresentativeFragmentTestStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineSampleLocationsStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationDomainOriginStateCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineTessellationStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputDivisorStateCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineVertexInputStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportCoarseSampleOrderStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportDepthClipControlCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportExclusiveScissorStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportShadingRateImageStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportStateCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportSwizzleStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPipelineViewportWScalingStateCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentIdKHR] with
    type Buffer = org.lwjgl.vulkan.VkPresentIdKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentIdKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentIdKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentIdKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentIdKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentIdKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentIdKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentIdKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentIdKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkPresentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentRegionKHR] with
    type Buffer = org.lwjgl.vulkan.VkPresentRegionKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentRegionKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentRegionKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentRegionKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentRegionKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentRegionKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentRegionKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentRegionKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentRegionKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentRegionsKHR] with
    type Buffer = org.lwjgl.vulkan.VkPresentRegionsKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentRegionsKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentRegionsKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentRegionsKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentRegionsKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentRegionsKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentRegionsKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentRegionsKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentRegionsKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentTimeGOOGLE] with
    type Buffer = org.lwjgl.vulkan.VkPresentTimeGOOGLE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentTimeGOOGLE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentTimeGOOGLE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentTimeGOOGLE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE] with
    type Buffer = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPresentTimesInfoGOOGLE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPrivateDataSlotCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkProtectedSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkProtectedSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkProtectedSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkProtectedSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkProtectedSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkProtectedSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkProtectedSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkProtectedSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkProtectedSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkProtectedSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkPushConstantRange] with
    type Buffer = org.lwjgl.vulkan.VkPushConstantRange.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPushConstantRange.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkPushConstantRange.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkPushConstantRange.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkPushConstantRange.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPushConstantRange.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkPushConstantRange.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPushConstantRange.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkPushConstantRange.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueryPoolCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkQueryPoolCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueryPoolCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueryPoolCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolCreateInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL] with
    type Buffer = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueryPoolPerformanceQueryCreateInfoINTEL.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointProperties2NV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyCheckpointPropertiesNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyGlobalPriorityPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyProperties] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyProperties2] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkQueueFamilyQueryResultStatusProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingPipelineInterfaceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRayTracingShaderGroupCreateInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRect2D] with
    type Buffer = org.lwjgl.vulkan.VkRect2D.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRect2D.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRect2D.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRect2D.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRect2D.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRect2D.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRect2D.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRect2D.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRect2D.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRectLayerKHR] with
    type Buffer = org.lwjgl.vulkan.VkRectLayerKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRectLayerKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRectLayerKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRectLayerKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRectLayerKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRectLayerKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRectLayerKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRectLayerKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRectLayerKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE] with
    type Buffer = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRefreshCycleDurationGOOGLE.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassAttachmentBeginInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassCreateInfo2] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassCreateInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassCreateInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassFragmentDensityMapCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassInputAttachmentAspectCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassMultiviewCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassSampleLocationsBeginInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM] with
    type Buffer = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderPassTransformBeginInfoQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingAttachmentInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderingAttachmentInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingAttachmentInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingAttachmentInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingAttachmentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentDensityMapAttachmentInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingFragmentShadingRateAttachmentInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingInfo] with
    type Buffer = org.lwjgl.vulkan.VkRenderingInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkRenderingInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkRenderingInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkRenderingInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkRenderingInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkRenderingInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkRenderingInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkRenderingInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkResolveImageInfo2] with
    type Buffer = org.lwjgl.vulkan.VkResolveImageInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkResolveImageInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkResolveImageInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkResolveImageInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkResolveImageInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkResolveImageInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkResolveImageInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkResolveImageInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkResolveImageInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkResolveImageInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSRTDataNV] with
    type Buffer = org.lwjgl.vulkan.VkSRTDataNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSRTDataNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSRTDataNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSRTDataNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSRTDataNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSRTDataNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSRTDataNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSRTDataNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSRTDataNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSampleLocationEXT] with
    type Buffer = org.lwjgl.vulkan.VkSampleLocationEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSampleLocationEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSampleLocationEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSampleLocationEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSampleLocationEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSampleLocationEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSampleLocationEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSampleLocationEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSampleLocationEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSampleLocationsInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSampleLocationsInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerBorderColorComponentMappingCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkSamplerCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerCustomBorderColorCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerReductionModeCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionImageFormatPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSamplerYcbcrConversionInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetFdInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreGetWin32HandleInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreSignalInfo] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreSignalInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreSignalInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreSignalInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSignalInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreSubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreTypeCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreWaitInfo] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreWaitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreWaitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreWaitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSemaphoreWaitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV] with
    type Buffer = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSetStateFlagsIndirectCommandNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkShaderModuleCreateInfo] with
    type Buffer = org.lwjgl.vulkan.VkShaderModuleCreateInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkShaderModuleCreateInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkShaderModuleCreateInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShaderModuleCreateInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShaderModuleValidationCacheCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkShadingRatePaletteNV] with
    type Buffer = org.lwjgl.vulkan.VkShadingRatePaletteNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShadingRatePaletteNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkShadingRatePaletteNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkShadingRatePaletteNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkShadingRatePaletteNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShadingRatePaletteNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkShadingRatePaletteNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShadingRatePaletteNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkShadingRatePaletteNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSharedPresentSurfaceCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo] with
    type Buffer = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseBufferMemoryBindInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageFormatProperties] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageFormatProperties.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageFormatProperties2] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageFormatProperties2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageFormatProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageMemoryBind] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageMemoryBind.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryBind.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryBind.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageMemoryBind.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageMemoryBind.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBind.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBind.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBind.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBind.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageMemoryBindInfo] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryBindInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageMemoryRequirements] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageMemoryRequirements2] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageMemoryRequirements2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo] with
    type Buffer = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseImageOpaqueMemoryBindInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSparseMemoryBind] with
    type Buffer = org.lwjgl.vulkan.VkSparseMemoryBind.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseMemoryBind.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSparseMemoryBind.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSparseMemoryBind.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSparseMemoryBind.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseMemoryBind.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSparseMemoryBind.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseMemoryBind.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSparseMemoryBind.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSpecializationInfo] with
    type Buffer = org.lwjgl.vulkan.VkSpecializationInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSpecializationInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSpecializationInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSpecializationInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSpecializationInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSpecializationInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSpecializationInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSpecializationInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSpecializationInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSpecializationMapEntry] with
    type Buffer = org.lwjgl.vulkan.VkSpecializationMapEntry.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSpecializationMapEntry.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSpecializationMapEntry.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSpecializationMapEntry.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSpecializationMapEntry.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSpecializationMapEntry.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSpecializationMapEntry.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSpecializationMapEntry.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSpecializationMapEntry.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkStencilOpState] with
    type Buffer = org.lwjgl.vulkan.VkStencilOpState.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkStencilOpState.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkStencilOpState.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkStencilOpState.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkStencilOpState.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkStencilOpState.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkStencilOpState.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkStencilOpState.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkStencilOpState.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR] with
    type Buffer = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkStridedDeviceAddressRegionKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubmitInfo2] with
    type Buffer = org.lwjgl.vulkan.VkSubmitInfo2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubmitInfo2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubmitInfo2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubmitInfo2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSubmitInfo2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubmitInfo2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubmitInfo2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubmitInfo2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubmitInfo2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassBeginInfo] with
    type Buffer = org.lwjgl.vulkan.VkSubpassBeginInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassBeginInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassBeginInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassBeginInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassBeginInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassBeginInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassBeginInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDependency] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDependency.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDependency.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDependency.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDependency2] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDependency2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDependency2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDependency2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDependency2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDependency2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDependency2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDependency2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDependency2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDependency2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDescription] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDescription.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDescription.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDescription.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDescription2] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDescription2.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription2.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription2.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDescription2.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDescription2.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDescription2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDescription2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescription2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDescription2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDescription2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescription2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolve.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR] with
    type Buffer = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassDescriptionDepthStencilResolveKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassEndInfo] with
    type Buffer = org.lwjgl.vulkan.VkSubpassEndInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassEndInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassEndInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassEndInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassEndInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassEndInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSubpassEndInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassEndInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassEndInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassEndInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM] with
    type Buffer = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassFragmentDensityMapOffsetEndInfoQCOM.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassSampleLocationsEXT] with
    type Buffer = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassSampleLocationsEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI] with
    type Buffer = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubpassShadingPipelineCreateInfoHUAWEI.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSubresourceLayout] with
    type Buffer = org.lwjgl.vulkan.VkSubresourceLayout.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubresourceLayout.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSubresourceLayout.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSubresourceLayout.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSubresourceLayout.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubresourceLayout.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSubresourceLayout.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubresourceLayout.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSubresourceLayout.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceCapabilities2EXT] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2EXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceCapabilities2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilities2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesFullScreenExclusiveEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceFormat2KHR] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceFormat2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceFormat2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceFormat2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormat2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceFormatKHR] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceFormatKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFormatKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFormatKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceFormatKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceFormatKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormatKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormatKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormatKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFormatKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceFullScreenExclusiveWin32InfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSurfaceProtectedCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainCounterCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSwapchainCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD] with
    type Buffer = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkSwapchainDisplayNativeHdrCreateInfoAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD] with
    type Buffer = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTextureLODGatherFormatPropertiesAMD.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo] with
    type Buffer = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTimelineSemaphoreSubmitInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR] with
    type Buffer = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTraceRaysIndirectCommandKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTransformMatrixKHR] with
    type Buffer = org.lwjgl.vulkan.VkTransformMatrixKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTransformMatrixKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTransformMatrixKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTransformMatrixKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTransformMatrixKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkTransformMatrixNV] with
    type Buffer = org.lwjgl.vulkan.VkTransformMatrixNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTransformMatrixNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkTransformMatrixNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkTransformMatrixNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkTransformMatrixNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkTransformMatrixNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationCacheCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkValidationFeaturesEXT] with
    type Buffer = org.lwjgl.vulkan.VkValidationFeaturesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationFeaturesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationFeaturesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkValidationFeaturesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkValidationFeaturesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationFeaturesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationFeaturesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationFeaturesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationFeaturesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkValidationFlagsEXT] with
    type Buffer = org.lwjgl.vulkan.VkValidationFlagsEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationFlagsEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkValidationFlagsEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkValidationFlagsEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkValidationFlagsEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationFlagsEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkValidationFlagsEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationFlagsEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkValidationFlagsEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVertexInputAttributeDescription] with
    type Buffer = org.lwjgl.vulkan.VkVertexInputAttributeDescription.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVertexInputAttributeDescription.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVertexInputAttributeDescription.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT] with
    type Buffer = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputAttributeDescription2EXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVertexInputBindingDescription] with
    type Buffer = org.lwjgl.vulkan.VkVertexInputBindingDescription.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDescription.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDescription.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVertexInputBindingDescription.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVertexInputBindingDescription.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT] with
    type Buffer = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDescription2EXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT] with
    type Buffer = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVertexInputBindingDivisorDescriptionEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoBeginCodingInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoBindMemoryKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoBindMemoryKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoBindMemoryKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoBindMemoryKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoBindMemoryKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoCodingControlInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoCodingControlInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264CapabilitiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264DpbSlotInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264MvcEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264PictureInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264ProfileEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersAddInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH264SessionParametersCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265CapabilitiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265DpbSlotInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265PictureInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265ProfileEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersAddInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeH265SessionParametersCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoDecodeInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoDecodeInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeCapabilitiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264CapabilitiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264DpbSlotInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264EmitPictureParametersEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264FrameSizeEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264NaluSliceEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ProfileEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264QpEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264QpEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264RateControlLayerInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264ReferenceListsEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersAddInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264SessionParametersCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH264VclFrameInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265CapabilitiesEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265DpbSlotInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265EmitPictureParametersEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265FrameSizeEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265NaluSliceSegmentEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ProfileEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265QpEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265QpEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265RateControlLayerInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265ReferenceListsEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersAddInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265SessionParametersCreateInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeH265VclFrameInfoEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEncodeRateControlLayerInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoEndCodingInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoEndCodingInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoFormatPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoFormatPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoGetMemoryPropertiesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoPictureResourceKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoPictureResourceKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoPictureResourceKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoPictureResourceKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoPictureResourceKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoProfileKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoProfileKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoProfileKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoProfileKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoProfileKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoProfileKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoProfileKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoProfileKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoProfileKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoProfileKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoProfilesKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoProfilesKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoProfilesKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoProfilesKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoProfilesKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoProfilesKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoProfilesKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoProfilesKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoProfilesKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoProfilesKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoQueueFamilyProperties2KHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoReferenceSlotKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoReferenceSlotKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkVideoSessionParametersUpdateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkViewport] with
    type Buffer = org.lwjgl.vulkan.VkViewport.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewport.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewport.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkViewport.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkViewport.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewport.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewport.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewport.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewport.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkViewportSwizzleNV] with
    type Buffer = org.lwjgl.vulkan.VkViewportSwizzleNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewportSwizzleNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewportSwizzleNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkViewportSwizzleNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkViewportSwizzleNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewportSwizzleNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewportSwizzleNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewportSwizzleNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewportSwizzleNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkViewportWScalingNV] with
    type Buffer = org.lwjgl.vulkan.VkViewportWScalingNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewportWScalingNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkViewportWScalingNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkViewportWScalingNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkViewportWScalingNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewportWScalingNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkViewportWScalingNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewportWScalingNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkViewportWScalingNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWaylandSurfaceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV] with
    type Buffer = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32KeyedMutexAcquireReleaseInfoNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWin32SurfaceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWriteDescriptorSet] with
    type Buffer = org.lwjgl.vulkan.VkWriteDescriptorSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWriteDescriptorSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWriteDescriptorSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR] with
    type Buffer = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV] with
    type Buffer = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetAccelerationStructureNV.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock] with
    type Buffer = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlock.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT] with
    type Buffer = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkWriteDescriptorSetInlineUniformBlockEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkXYColorEXT] with
    type Buffer = org.lwjgl.vulkan.VkXYColorEXT.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkXYColorEXT.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkXYColorEXT.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkXYColorEXT.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkXYColorEXT.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkXYColorEXT.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkXYColorEXT.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkXYColorEXT.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkXYColorEXT.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR] with
    type Buffer = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.VkXlibSurfaceCreateInfoKHR.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264Mvc.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElement.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264MvcElementFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264PictureInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH264ReferenceInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265PictureInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoDecodeH265ReferenceInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264PictureInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefListModEntry.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMemMgmtCtrlOperations.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefMgmtFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264RefPicMarkingEntry.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264ReferenceInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeader.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH264SliceHeaderFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265PictureInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfo.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceInfoFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModificationFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265ReferenceModifications.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeader.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceHeaderFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeader.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoEncodeH265SliceSegmentHeaderFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264HrdParameters] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264HrdParameters.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PictureParameterSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264PpsFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264PpsFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264ScalingLists] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264ScalingLists.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SequenceParameterSetVui.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264SpsFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH264SpsVuiFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265DecPicBufMgr.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265HrdFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265HrdParameters] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265HrdParameters.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PictureParameterSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265PpsFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PpsFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265PredictorPaletteEntries.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265ScalingLists] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265ScalingLists.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SequenceParameterSetVui.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265SpsFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SpsVuiFlags.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265SubLayerHrdParameters.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VideoParameterSet.malloc(capacity).unn
  given Allocator[org.lwjgl.vulkan.video.StdVideoH265VpsFlags] with
    type Buffer = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.Buffer
    inline def stackCalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.calloc(stack).unn
    inline def stackMalloc(stack: MemoryStack) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.malloc(stack).unn
    inline def calloc() = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.calloc().unn
    inline def malloc() = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.malloc().unn
    transparent inline def stackCallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.calloc(capacity, stack).unn
    transparent inline def stackMallocBuffer(stack: MemoryStack, capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.malloc(capacity, stack).unn
    transparent inline def callocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.calloc(capacity).unn
    transparent inline def mallocBuffer(capacity: Int) = org.lwjgl.vulkan.video.StdVideoH265VpsFlags.malloc(capacity).unn